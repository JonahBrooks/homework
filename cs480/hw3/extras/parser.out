Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> module
Rule 1     module -> stmtlist
Rule 2     stmtlist -> stmt
Rule 3     stmtlist -> stmt stmtlist
Rule 4     stmt -> print_stmt NEWLINE
Rule 5     stmt -> if_stmt NEWLINE
Rule 6     print_stmt -> PRINT expr
Rule 7     if_stmt -> IF name COLON NEWLINE INDENT stmtlist DEDENT
Rule 8     name -> NAME
Rule 9     expr -> INT

Terminals, with rules where they appear

COLON                : 7
DEDENT               : 7
IF                   : 7
INDENT               : 7
INT                  : 9
NAME                 : 8
NEWLINE              : 4 5 7
PRINT                : 6
error                : 

Nonterminals, with rules where they appear

expr                 : 6
if_stmt              : 5
module               : 0
name                 : 7
print_stmt           : 4
stmt                 : 2 3
stmtlist             : 1 3 7

Parsing method: LALR

state 0

    (0) S' -> . module
    (1) module -> . stmtlist
    (2) stmtlist -> . stmt
    (3) stmtlist -> . stmt stmtlist
    (4) stmt -> . print_stmt NEWLINE
    (5) stmt -> . if_stmt NEWLINE
    (6) print_stmt -> . PRINT expr
    (7) if_stmt -> . IF name COLON NEWLINE INDENT stmtlist DEDENT

    PRINT           shift and go to state 6
    IF              shift and go to state 7

    if_stmt                        shift and go to state 1
    print_stmt                     shift and go to state 2
    stmt                           shift and go to state 3
    module                         shift and go to state 4
    stmtlist                       shift and go to state 5

state 1

    (5) stmt -> if_stmt . NEWLINE

    NEWLINE         shift and go to state 8


state 2

    (4) stmt -> print_stmt . NEWLINE

    NEWLINE         shift and go to state 9


state 3

    (2) stmtlist -> stmt .
    (3) stmtlist -> stmt . stmtlist
    (2) stmtlist -> . stmt
    (3) stmtlist -> . stmt stmtlist
    (4) stmt -> . print_stmt NEWLINE
    (5) stmt -> . if_stmt NEWLINE
    (6) print_stmt -> . PRINT expr
    (7) if_stmt -> . IF name COLON NEWLINE INDENT stmtlist DEDENT

    $end            reduce using rule 2 (stmtlist -> stmt .)
    DEDENT          reduce using rule 2 (stmtlist -> stmt .)
    PRINT           shift and go to state 6
    IF              shift and go to state 7

    print_stmt                     shift and go to state 2
    stmt                           shift and go to state 3
    stmtlist                       shift and go to state 10
    if_stmt                        shift and go to state 1

state 4

    (0) S' -> module .



state 5

    (1) module -> stmtlist .

    $end            reduce using rule 1 (module -> stmtlist .)


state 6

    (6) print_stmt -> PRINT . expr
    (9) expr -> . INT

    INT             shift and go to state 12

    expr                           shift and go to state 11

state 7

    (7) if_stmt -> IF . name COLON NEWLINE INDENT stmtlist DEDENT
    (8) name -> . NAME

    NAME            shift and go to state 14

    name                           shift and go to state 13

state 8

    (5) stmt -> if_stmt NEWLINE .

    PRINT           reduce using rule 5 (stmt -> if_stmt NEWLINE .)
    IF              reduce using rule 5 (stmt -> if_stmt NEWLINE .)
    $end            reduce using rule 5 (stmt -> if_stmt NEWLINE .)
    DEDENT          reduce using rule 5 (stmt -> if_stmt NEWLINE .)


state 9

    (4) stmt -> print_stmt NEWLINE .

    PRINT           reduce using rule 4 (stmt -> print_stmt NEWLINE .)
    IF              reduce using rule 4 (stmt -> print_stmt NEWLINE .)
    $end            reduce using rule 4 (stmt -> print_stmt NEWLINE .)
    DEDENT          reduce using rule 4 (stmt -> print_stmt NEWLINE .)


state 10

    (3) stmtlist -> stmt stmtlist .

    $end            reduce using rule 3 (stmtlist -> stmt stmtlist .)
    DEDENT          reduce using rule 3 (stmtlist -> stmt stmtlist .)


state 11

    (6) print_stmt -> PRINT expr .

    NEWLINE         reduce using rule 6 (print_stmt -> PRINT expr .)


state 12

    (9) expr -> INT .

    NEWLINE         reduce using rule 9 (expr -> INT .)


state 13

    (7) if_stmt -> IF name . COLON NEWLINE INDENT stmtlist DEDENT

    COLON           shift and go to state 15


state 14

    (8) name -> NAME .

    COLON           reduce using rule 8 (name -> NAME .)


state 15

    (7) if_stmt -> IF name COLON . NEWLINE INDENT stmtlist DEDENT

    NEWLINE         shift and go to state 16


state 16

    (7) if_stmt -> IF name COLON NEWLINE . INDENT stmtlist DEDENT

    INDENT          shift and go to state 17


state 17

    (7) if_stmt -> IF name COLON NEWLINE INDENT . stmtlist DEDENT
    (2) stmtlist -> . stmt
    (3) stmtlist -> . stmt stmtlist
    (4) stmt -> . print_stmt NEWLINE
    (5) stmt -> . if_stmt NEWLINE
    (6) print_stmt -> . PRINT expr
    (7) if_stmt -> . IF name COLON NEWLINE INDENT stmtlist DEDENT

    PRINT           shift and go to state 6
    IF              shift and go to state 7

    print_stmt                     shift and go to state 2
    stmt                           shift and go to state 3
    stmtlist                       shift and go to state 18
    if_stmt                        shift and go to state 1

state 18

    (7) if_stmt -> IF name COLON NEWLINE INDENT stmtlist . DEDENT

    DEDENT          shift and go to state 19


state 19

    (7) if_stmt -> IF name COLON NEWLINE INDENT stmtlist DEDENT .

    NEWLINE         reduce using rule 7 (if_stmt -> IF name COLON NEWLINE INDENT stmtlist DEDENT .)

