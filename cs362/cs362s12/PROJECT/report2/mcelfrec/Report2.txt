Chris McElfresh
CS 362
Test Report 2

Introduction: I figured out how to test buyCard efficiently! With collaboration, a 5000 loop test was created for buyCard that covered the process of buying a card in the game Dominion using pre and post states. The output of the file shows whether the player: bought the card (better yet, if the card was even still available), if they correctly decremented the supply count of the card they bought, if they correctly decremented the number of buy phases, and if they correctly reduced the amount of gold from their hand. At the end of the test, it gives a brief summary of how many times the test failed. The test was created using random numbers for which player was going as well as how much gold they had and what card they were buying. 

Code Example:
 if(pre.supplyCount[supplyPos] > 0 && pre.numBuys > 0 && (pre.coins - getCost(supplyPos)) >= 0){

        if(post->supplyCount[supplyPos] != (pre.supplyCount[supplyPos] - 1)){//There should be one less card in supply
            eDecSupply = 1;
            printf("DecSupplyError, ");
        }
        if(post->numBuys != (pre.numBuys - 1)){ //Number of buys should be decremented
            eDecBuy = 1;
            printf("DecBuyError, ");
        }
        if(post->coins != (pre.coins - getCost(supplyPos))){//The coins should be reduced by the cost
            eRedCoin = 1;
            printf("ReduceCoinsError\n");
        }
		
    }

The only issue with this test is that the coverage is limited to the buyCard function. However, it covers it 5000 times with random variables so I feel that this is very good coverage of the function.

Example:

File 'dominion.c'
Lines executed:8.66% of 543

Group Testing: This test was very effective with testing other peoples code, since it was decently quick and gave a great test report at the end. Overall, the results I got are listed below.

Mcelfrec: Good Tests:5000
 Supply not decremented Errors:0
 Buys not decemented Errors:0
 Coins not reduced Errors:0

murrown: Good Tests:5000
 Supply not decremented Errors:0
 Buys not decemented Errors:0
 Coins not reduced Errors:0

adamsmic: No code present for testing

brookjon: Good Tests:1943
 Supply not decremented Errors:3057
 Buys not decemented Errors:0
 Coins not reduced Errors:2628

kropfb: Good Tests:1943
 Supply not decremented Errors:3057
 Buys not decemented Errors:0
 Coins not reduced Errors:0

westb: Did not compile

vanbeeks: Good Tests:5000
 Supply not decremented Errors:0
 Buys not decemented Errors:0
 Coins not reduced Errors:0

wheeleri: Good Tests:1943
 Supply not decremented Errors:3057
 Buys not decemented Errors:0
 Coins not reduced Errors:0

ericksoi: Good Tests:5000
 Supply not decremented Errors:0
 Buys not decemented Errors:0
 Coins not reduced Errors:0


Bug Report
Name: kropfb
Summary: Incorrectly decrementing supply count
Description: In the function buyCard, there is no code that tells the program to decrement the supplyCount of the card. This is an issue because after buying a card, the card count needs to be decremented or else no decks will run out and the game will go indefinitely.
Solution: This can be done in multiple ways, but the way that might be most efficient is using another function that gains the card that you bought and then decrements the supplyCount for you. I recommend looking at gainCard.

Conclusion: Overall, my team did pretty well but it looks like they all made the same sort of mistake. An email has been sent out regarding the bug report I included and will hopefully be working with my team more on how to fix the code we have. All in all, I believe the function buyCard is covered very well.