%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: main.dvi
%%CreationDate: Tue Apr 17 23:06:32 2012
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMBX12 Helvetica CMSL10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter main.dvi -o main.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2012.04.17:2306
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMSL10
%!PS-AdobeFont-1.1: CMSL10 1.0
%%CreationDate: 1991 Aug 20 16:40:20
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSL10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -9.46 def
/isFixedPitch false def
end readonly def
/FontName /CMSL10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 53 /five put
dup 63 /question put
dup 72 /H put
dup 79 /O put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-62 -250 1123 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9429B9D40924DC059325D9D4CC0344F3F997A99E6CC0676735EBCD685AAC9142
08DAFEC78BB41AFC2F1C219910BDF41D6279284EF600B69776CA15BC8A34347C
30783C52AFA60FBE3E353E2AE354CF87B558776A22C776C7A0B5AB5CE1F941EF
C2D9CAC37294BF407A671F10E4743BF842143F4F7DFEE643BA3BBD8BB9E3F24A
BCCF7F0ADF8BA500620C81033EAE8C4EF2C1DEF13AC575F1B3BBB66F093D3B78
5412B82B67FFA087AF57182B2230F9F2137180CA58A7D9B2C822FF04BE6CD01D
43B2CA7058C7B953F6D9B5D6E91ECBAA5CDE1159B0E59C83DBAD96D6C8C8BAB1
374EF652D10C0F3EE7104472C98DD3572AAF2D45A70BF7061447E21EE3C3BF23
DF39C2D1B35B42CD5297BEBE6BC94F7C9DC6E61EC67E4F677256FED9064BD3E4
B51A71B1D27CA4E5AA9E1D8080E6DAB5310711EEF87C40859FA935B19524AE83
63B163FA8397BDFF443227FEDF7DB27DC35D89FB1C5E435DA0619A5C88AFC73B
89A2DF5E767C5B536BC7167A840A0C32BD57A14DE69A7D0D819AC36FF32F908A
5070F32983BB007437E3500799DF5E0AD3710A4C0000F0098D5BE99F2EB9C1C2
C444FD9552D0DCA098A94B3BF176F511CEE13DB7EFFAED7C47B5ADCF8D4700F5
7B6DF50EE617C00966B9A2828882804DB7477F4A8CF5345B7F3568B4F72BCE73
2E2AA5BC4B4C70E21F3AD9AFC3B8605A00D67EF9ED1F4D13DDAA920D45B43CE0
0941BF17CF05D2B777C11D4D844AB20C0693D1DDF00B27D9E1AA2D98A4A06CC6
D342AD8F644F4787B66CA7D861E7CE13FCDA85C1B0C9F94009768EA89838EBA2
7818F40A3CBAFE9BD3ABDEC16E56A061E3D8BDCAA7497B48365C48EEF4DB1436
F4D5CE8A67BAD18FD3128014844B6A641AD515B586D3561199AF9366D3E7CFFA
AADDFF6031FBAE8EA39AFF87F8355DEAFF828765D56DFE1A0AA8D8071F437ACD
BC3D3FAF4211EA5C5CFD0B42894704B3FD66B59EC31EFF9C938B6C702D623C9E
522AB5754F0349221055A36BE9AC2E1FA4C46DA53F5315D55920C2E98889C3CB
70BCDCFF361AD71799AC352FA4C8ECFECD29DE7BA1E54A8719C55D58766540C8
18F7CD8437805259B1C1054F1D15DA5B896B3E3B6A134A409C8785B4C93A19D5
F18DBD5936B6D5E21F84310D51C912DB66092C3E85CF159C0127D858B70B7592
84702D2CFDC7DE6F046B1C75FAD3DED0D5453947AA1DE6B57C9B012FCB37163D
CF9D24342055CCCECAF50E68DA4DCEF61F176D7487916A496D5A235862C5406E
A1FD2ED90D27DC0194B05C765D1CAE986C850A3B9DB40F7B9FCD8800A3B744F8
0CF0F38F370512AD09A320DA432EF5BBDBDE4C069B63A5D64FF85BF331D8EF79
A08C6B1B6869645256EA417C8E36C26023BB21D6C577B4101D5109705BEA6EC7
966F9D7BC825BEA3B6D7BD54987267C2A2AEB6BB9A860D757DDE7C44333EBDEB
737DBC35ADD89F044860EBFC33C9D97F355A4C097B1D7F275F4D85F461BEF1ED
FCB941E285460FA1BC7CDE1C689F39F720EF1F45270A442C14396A39D0CE4793
30280E0C7C4136E28A87A2971434F9DCD833D2166E26B1B57C32A7D6A3196659
27EB5D9E7E9FF497432B3E0762FC4C3DC6FBBEA3B0E1ACFF13211B8444F0C48B
B24FA5E4614C55192E26A59539D23CF0B83B5C18086278A3BB516C4A64C969EA
0901361BFB36FE9AE8BB6E23BDF1911D4B1000F89C2BDD720A07528636784BB3
0A0ADD712AC7A74A66D84CD3DAB6E16877B19B3DBB695AD3873EFA3E28315347
6FB30C59473C090031A203FEFB185CB249B2F487DB579181B69EED09F04A7E5F
1E4EB62AF842FC80C239919967264AB24DA38253C7AE1C87DAF5CE4FDBCC0BDB
75052F641A91C74421BDB1C46E6E4A5CDB8611091B3B5D766B6E3E4291D3A7C6
C310BD77DCE8FBBCAB2E7DC32403AD1242EF233D47883EA62EF122D6DBD71A71
15100580CE87B4A5E64EE6EE5C3943F50AA4F44EC3A8DF598D76AF04B4DBA777
64424563AA75B74246650BE819DA6A4B0EC3C37F0C6385CA8B7F03D95DF137CB
BC73688C42EB3A9B87CA3AD4996F1F61E90AD20D21AA4CA0236BCECAE939B15F
1FBAC29D96616337860359CCB9743594DC0108E5C8E0EE65C3A418C1F1B4BD70
65260A7CA30AFEB74751287730B4815C60E823BFA7378BBC64BFCCBE7931FEB4
CDD0DE50CD51F4FAF4A60BDF3C7B53E30EBEF381803A9207AC533934EB376151
81F2FF9829B5DD5084165853FCBF398B9237DC1177CCA7A01BA5514651A0CCD1
3F752098946D317D7D1D71C39888BAE52843B993B97CE33CDD82D9605F85A5ED
4708893886A0B311FE6D6495BEB6E8F5904199EE51430FBA414164FEFB410F30
F6ECF5620F8DA30160D9F756566BEDFF0BEE07FF354DB441D5D3EF7267555EAA
58223523FF3FCE3D1345B31D616A7D7776E0FD2BC81DB77101633C56BFF82012
CDCFA9045DC6E4B35A9ED0327FAB5CAD9BDD27A45CF8B3169459715B2D03F4E5
51E7EE8524380A32CFC0F861DA42D87D6232C9D623C70784F98CDC5CBBA60223
5AF6392E7B4CA6CEE2DD528FD9425C6C137A19B3909DF390971B9DD63E2369FE
9BFFEFA6AF64D2AE537440731C1FEE10D19E12397690601EB03E2345808EE0E0
EAFE0AE9A0B3D002AE6CCF38CC1C799F6A5C812FE5C63FA3C20D058A2BB3654D
0E5674612AE2DF606EABD4E47F1393F4651D796D5B25451B23422BCD901F92B9
56BE060C750CBED97A121C3C4BF6B04F355C987915B28AF9A356DF7A4BB82958
E0E7D9405276EB37A1FE8D18EA5F3D98D7ECE0FCAEF57CFC1BF46943A8213C2E
0CD19B593E71FE54EA0C43AEDFE7D27563479A81768925B310054C9CE7064A5A
34564E2BBC52747A255A469764584040F52DB68560FBB3C9BC4F58F49AFD19F1
FAEA84B6BBCDC83082B121A9ED00403BF5B197AA674BD55C453821135B0E970F
5EE24C0720842E08AFEA075F3589939C3E8A09BF9AFCA7A5898EB025ECC65128
976775C870E65BE6D607021B40FF9CFF1D820CA11DE86F43AE5004DF6384B909
FCF9C7CDD84A9B6DD4592B277D979ED0DAD5379EFC651E4D8228E4921532B74F
87FBF6275E48F2F19701758A9B2229DCF200A484655BF552B17D5802450D75D1
1FAA984E23B558CC60D641936CAE899189689A80D0806FA3F5023FDB563335DA
A0EC17BD1523B9C38273685FFE448BE751267880812C081EC543164642B2FEB5
E91D33054F9928FAF220C7AB581D0FCF40CE347338CE76FBAE18D9CDF6E30CBD
912D418A14038E0928862C1E9EB72A0C839CA4DE594C8925C9883E749B1AD0BC
7FB89C0F11EAB6A4239C39DCF00134FC45C23F2E40C985793737549B8AF8D612
BD6C0FFBDB8F38146C7890C96DCC77F8B84F1C50F30C804700A3084EEE2CDF5D
3C37C295EA41E37A3F5F23F9C40186185419ABACE17BB144F51C115F1C304AAA
B99C37C87962E73728A3A8B570BA4495646565E1E6460613A5F206F1284CFFDB
1F3429ED44E2A26B9547938131662BFB8CED2E712CD78AFD9A0AF5B395B52BDF
669E637EBA4447A2B07202A351026F92DAD681E6D3676E205F584D0E47AB3C3A
ADDF7123C55525CBB5B93744B288C97E256B025704B517A49866353F062745D5
E60BB6BBC12BD2C3227298FC2846AA52F50819BFD8DBB2F0611C83161AC0B04A
F4CDF30796BAD0BE6BB54138C6632F6C4BDD16089B9A52224AEE1BC9D1CA7808
5F6D6BD83DC77F2CA6BF3AD485FB7F06F25514458AF42F4914D07521E7A8C173
AA2BC2541CC096A317D8CFF34615E2D51A3C52F809CEDA13F19D1D53F3471D34
C0DB3021D838A4720D99B18DED4A5DDAEC994AF24219518C1BDD5E87998CDAE0
FE6A37C35B10CD355B2848EF73088C55D6366F4474681FAF67637F8CB6C5248A
8B7D5EDF2C71B2408EF78999CBCED59EEBA7D54BFF0DB3774FB00C3D99397DC9
5AC020E15DAA83B55719FF0AE36EFBB891573C069D9305450951476EA82D5C10
AB15BF9493FC0DAEE1F84CF7EEADEE973C263F3DACA5B20976F1F13373F01918
9148EAA4029A80080607C3100B05524FF9B32AAEAB6E9273B89F1FE23DE84887
7FCA1C3214576B86BA2093C2DDC49466690C36D32335C95A116360503733E3F7
33897703165DFA91E44EE8B7A999307B3AD30D458E09B0C08525F5DD966F3A23
DD184A062BAD8F930661E2605F870B6E0FEB65FF141E5531E498BA188433D9D2
388C0A3D1D3AA815F686614D3E090A13E50A0420F35042BD7EBCB417056A5AEF
D8CF01BCBBA855BEE9476964C3BE57EB5DD52F05AE647FE95C5C9197C968490E
4DCFDD36C97A4F9501AFD3FD303C18D056F48195A0D59B3CD7FD64FB93A38352
021FEA35B16AD20B979AE230D8E78EFEC7DCD7115761DD9801922CCF5F25CB8A
0F6ACB88573CA2B503CDC2CE9F1D09D77115DC201DACE605219CB16BF03A6306
5CA35674B78CA5A9B25D411CB28EC9B79EA554F1B58E3ED9D5EB42BB83872B6D
952355A628091C9B890E810A1EDB6BFDBCBE2BE029D3D7E37908B3A0606C0647
2A7E50744B4C0672C0AD25F8FE0B49839A76345F7376D18EE335434B8B7BF6D1
1222BFD880EC38DF3C8A1ACEA94696432EE5A1267557C921DE828CB073DC5A69
879D2932ABA0AF3F7E6AC599B7E4712D0841C9C5C01F0FF2D82269CB11AA6581
2AEA8FEB003A32E9AC9EC0293CC067DC7B29F95F3BE75FBFFF10B245D51787BA
F519F17B3517106484AB6DC1FF25058EF88326D257DB049A486C86DD113D48B2
BA91F9DDFAFA16FA2BD5D1028B720B9F6B93842B4A2E250498837E82DE8C05AC
EA004EA0AD58F55180FE5977E02058B9EE4FD2AF50F02D4A970DF8C07D2B4BF7
18C3B080662171C590E1A07D2F6B238F62B13760DAE58958E4F4A9339DD56BAF
968D6F7C066395ACF34260967612EE68BD878E12179BC572F1E236267F5714B8
FA9C4CF3F091485BFFA18DB3B3244E33B7508452330AFE5E336A7F80303EC4F9
FC3E756C0BD3B9706D5EE1A03754D52E74663D094941ACBED404AF6694772A8B
5FF2DC98842CCE1E510B911743CB9FD23AE43EC55E2E887E9759F8C5E5568357
7B4FDA3EE73D7C71CC5A2D3B2FB580258B55DBB462C4DE88C4CE366FEE81EDEA
92B8229213CDB55F245A7730665F9B70E67B45C71D616E3EBD0C762AAFBE41E0
CF72BAE304CD3607C0A37B24E03C5459CF9572898C95CE6775598FA3EDB5CE4C
D8C8C002DFEE89A7C8BB0A8E1B69B6A7024C4BC845274AF8798159DA2831FCB9
E97A041BA17C024937A9D80B1B78DEBF00E53D1B887E2765DC32BE2740AAEEEB
2782D3BD94072519EF2A6EA30D9F18A03AAB44362F2F04DFE79E56B13D84BDEE
33CDA999251C44A6505B35B5A242A333EE42285D98133E390C3C37F7FA65250E
83E5F200ECF11CA054FCFBE46F324C39A3BB6D5158CBC29C1ECC036C44FABD34
5BB7BA526C643C361F7EBD09C71CD5C99549D30E9FB37D0F55D06D6BEDC65BDA
D463B14322178CBD2D9A5DD43DE5B438A05C54C9F18E246B4B490DFF75E12ED0
38A1771C2448355878E34AF9464A7592A5BBFFFB97DD7DE7EBC6ABD1DBAE1E8A
F4CCBDECB5E0F7583CFEC71096AAE35ED244E8799F2787D2899177496E0D964A
9BBB2C57B5C99BE9C1F906DBAC4C31C69800C37536339FA6697E8347833D03DA
6F91B7C6836B69D472FFA4873673C467DE677B06F634443877E8B44B51B9F69B
A5473C7030F1ECEF4E367871583E5B90BD305DC940985F3FA2E69AAF5D2935EC
E2FC711899A218F4B02C2E44DD7A13E13ADB252119F2B8A569536375FE9BAD45
76110544B91BFB72930106BA611080A1DEE663279E263A45FF285AC50217DF31
86A6EF48716F13B19E1FB450EEAA8D572C992831101288416F6870C84FA2EF0D
FC4443794E9A9472412DDECA9C8936B39E753CC225A1D2F2059249ADB0474108
3C0F13EF2D0D17CAEECF0F04CDC382962952B30EC197827D651643ABDE428676
2CA204E9662DF1C9EE5F9A8DE80B76E53A131D8922BC6E98253F5C6553A4E923
7E2ED0A168AFDEDD7F874B30A582840687CB512AA6445FAD168D75368C3982CF
EED4C8EC7138F88FEF6E5C10E4A9B11871D1CF8C82A47A1324D3007D7B23D9C9
E04849FD8C1CFD868D82B455B6D16DB46DA43756AB9ABBE60778B21B24A6F4FE
AB2331DD7788CB7FDED953169D6E88D6418E698DC84CF5D96E22162C04598ABD
C7376F793841253D0486847EF06B384BCBD0BB7C88D4EDCB6A919C028745A753
B948FB1E70D5EC7CC48D6EE6E7E2373392D9B44A383455668FACA6ED87E44D1A
30669F75240DA98B00311AA0BF77C7F1F4ADA7A94BD798993C078725D9D52996
582F2B9AC4665D0A3EBD42DC6668B8C975E95527881316DD6987BD4DEDDDB4DB
C361E07D2C2D2B1BCFA7943A1931C846ED6A21BCA5E1A1E5F61E501DEB3ED093
27C22B3320B3934ABFB11B79473FE8BB2E0594C55267D981501C83F00CB14057
9B1945D5ECF4A8C2EC23B680030411232AF3A183B7D46DF155D33BFE41CBD6A9
27927071BE3A831F7F7E40142ADC2B6E8AECF97803517996669EF1F12C4F6D2B
3DAF72A95D312EB6AC473B85186E830637F533B748AF8757BB72ACD8C64C94CD
43441F314AE8CC8ABA88B4FD271C19FB4661FF8919F5A22B2DD7F25BE9BB530B
F28D34CD1C963F26C9E4E8237DD45455727D2855E8499A73F556B06C93751D65
FEEC04BD83304EA5EF8D33AE1509CDE56FA8A311D9F3EE4230CFB8117E30EBDE
28720FE19C734D82B85EE7BE259FA029CE15EA9A1D65EF6A01775F1347390A09
203023A8A1694281B40131799FD98C7480FEB34C49A57C506B787746E1E8F9D7
02481F4D85DBCF95CDE62357E8E012950353D3B4F3B0430EBB65206A11343431
62E2843B698BF2683109DEF054F615BF88EE9E3D0E5C3A6E2BCDD4219984FBCA
E4822AB786FBE9DB9D9616C1B80452D8721AE3BA2C42ACFEB08D606248C851F4
356C36E26A9CD3C0E4055A3DBF4AA5134A521BAEF6341A7D7A725A8C54017D61
12FAECC78C93F37D0A6CAD728ACA99106B13BCDEABFC08ACE7ADCA9085FB6022
551002107D95A12605C1DA7501B0CC32FEF15888BF7409C230755F4EA29C03BF
4677C311575BE5D0DA2D3774E5799997C4868457B17A32891A9CBE80FB552D50
59C5A68F1B187CDCDBE3F5F1A81E862CC4D390032E8BCBABDC65399089AD792D
02DFA9B1F03A62030951A5C88848618584051029BAD6458537B983ECE1C997AA
35A86945A3BDE31BCDCF2C6F40F03A9A20D35D84D9C0A22B7A9401F09CFA3CAA
A8E36939DC1D33F08DEB435DC9719F1A24DF10D035BF1ED70F00A3448A35E374
57A8324ACCD21A288B13A35554AE7CB6A79E8DC88E2CB1AF842F1998D13475CF
513B62F183080F9449AA7DB0F095C564D2BA208A39952DF6D56BD0ABC38DA562
05D1678D6B89B6C1E1F74F146ADCC9E7A042DB64BBC4EF3E36DEFF634CFB89F2
729145D0674D6E0AC01503A8BFBA89F80CC30F954F47AB9A63EBAEAB3EB71C8E
702353E2F3FA00B0BC8C969351EC5C808576AD3FA3957FF9339FA611D73FB7C4
855D89D3BA917560A49CB14F941975E48D731E528AF28BAEB7A87F140187F123
8D7D7CBB9B9553229EBD886AF27D0F6EC9127657877F5DDF742EB4872F258486
4B6C6113685C9F7AC983311C37BFFCC3F9E40687DBB760876925B53C10CBA3E3
086A4EA02ADC3F56C1ADCDF6BED4BC0EC59F61D2AC8C780DFC33DD96D89C98A0
1FCD4F3DA7B88E3D4F7A58EBE18AB4ABDE6ADC83B2AB6E754BC8A027D061C7AE
E8F484D44E51C2234C13C9543358913E026E29CCE44212372C1207316F16E3CB
D0B41170955940EE891A394C7BA2D3E375A434726A8889EC9AE32B4A135939CF
16DF47CDB455097D0FE31A18343E06A377F2E6A02FF32C4540ADB372B1645FC6
A50048AAEF57DEED1599D77BECA0CE73A37179BB246186FB5ECEA978D13F76AD
D19F49F7D1AFBB6C3C65628BDB9A96C0CE5D8A822060F666A7587D682E56364C
B7E47708802D0BD19425D455781A6C5B288A745824CC14AC1378700FF9AB9B4E
DC24F0DCD372F9DAB761FB0CEC13064EA97188B29A0A3ED2710A9075A024AA8B
FAE69BEBE0F6D7CCC46AA646F7274802C7B33BBD75A835B2FDE4EE8B0541440C
34FC644CD07CD61408569F2F976B5CF9C53D8E3FDE1A404ABFB2D493B2438882
D523962C868709998D1A2535CAD4150D206D5C8CEB36F525A9274D2E5787FA6F
29288297DD096AD1160ABD6CA5AA2F95E4160787D991297006D1FE02029FE189
AF5C7764947F8EDC121BCC2A7E23E3FC75262F6A27277EC6D3CEE03EE3528475
809AD99A537F5327AFC291689710C540650A20BE15271821FEE4DB906EDF57D1
DB7958A935491738CDDA851C107CB0ACF8182B1F4ADE5F11F9DEBA4D21DE7C12
658516
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.1: CMBX12 1.0
%%CreationDate: 1991 Aug 20 16:34:54
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX12 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 63 /question put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-53 -251 1139 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F0364CD5660F74BEE96790DE35AFA90CCF712
B1805DA88AE375A04D99598EADFC625BDC1F9C315B6CF28C9BD427F32C745C99
AEBE70DAAED49EA45AF94F081934AA47894A370D698ABABDA4215500B190AF26
7FCFB7DDA2BC68605A4EF61ECCA3D61C684B47FFB5887A3BEDE0B4D30E8EBABF
20980C23312618EB0EAF289B2924FF4A334B85D98FD68545FDADB47F991E7390
B10EE86A46A5AF8866C010225024D5E5862D49DEB5D8ECCB95D94283C50A363D
68A49071445610F03CE3600945118A6BC0B3AA4593104E727261C68C4A47F809
D77E4CF27B3681F6B6F3AC498E45361BF9E01FAF5527F5E3CC790D3084674B3E
26296F3E03321B5C555D2458578A89E72D3166A3C5D740B3ABB127CF420C316D
F957873DA04CF0DB25A73574A4DE2E4F2D5D4E8E0B430654CF7F341A1BDB3E26
77C194764EAD58C585F49EF10843FE020F9FDFD9008D660DE50B9BD7A2A87299
BC319E66D781101BB956E30643A19B93C8967E1AE4719F300BFE5866F0D6DA5E
C55E171A24D3B707EFA325D47F473764E99BC8B1108D815CF2ACADFA6C4663E8
30855D673CE98AB78F5F829F7FA226AB57F07B3E7D4E7CE30ED3B7EB0D3035C5
148DA8D9FA34483414FDA8E3DC9E6C479E3EEE9A11A0547FC9085FA4631AD19C
E936E0598E3197207FA7BB6E55CFD5EF72AEC12D9A9675241C7A71316B2E148D
E2A1732B3627109EA446CB320EBBE2E78281CDF0890E2E72B6711335857F1E23
337C75E729701E93D5BEC0630CDC7F4E957233EC09F917E5CA703C7E93841598
0E73843FC6619DE017C8473A6D1B2BE5142DEBA285B98FA1CC5E64D2ADB981E6
472971848451A245DDF6AA3B8225E9AC8E4630B0FF32D679EC27ACAD85C6394E
A6F71023B660EE883D8B676837E9EBA4E42BA8F365433A900F1DC3A9F0E88A26
3266FEEFE1F2ED62F1442F13D5FAEAC4AEA2B95999F34125FBAED210923F255A
571F8CEA1839FB26754DFAD6CB948BE9C2442424B97D25B9050F9026F3516307
0A6117C7D37009920D23A5C8EB97DFE358C5154FA76B7BD6AF0B70DCAC49D4A4
8AFAA24C81B7332228962136AD408D9F8E988CFC72BFE2C176E2BBCF76B050D5
69952E002DCA8BBFE21B59FEC7483A397F16FE3A3A22FEE019C3E80BEECAA874
B4BE9E3385A59742814E83A359029AB220922DB602DE2882E309D0912978A31A
A643157028461A7BBA828609D7D700F5C1ACCC9CB291C581327B5F1BBE01A5AA
9569F1761482D198A0F977B718E39DC268E028F345C74A80228B53A48E539016
4F4754A03462867E1E5E4DD38FA6EBB844212E3B13331701C616B18F7D3547D5
2B8408C7FFE3A42B4F8AB6AA83EA4F59B4817619B89FDBDEC578301D4D054FA8
0925D1FA66CFF3962FDBD4A4306B2067D836E0916247C7EFAAFA61424569E47E
2AC7480B0387D9E2F879E67356599C003C006D512B4F874A3E33ADA0EA8E36CE
7015218C3B0ED1B1108079562E64212303FA9EB4DCAE6B471293F6911F911519
11B92102A725450AA2A652EF237D4A3FB5F6540B376BBFD49BCDA540F3006D5C
4370DF7E983CAEBF9690F4770BBFAC1E0BC1872600EB56FBFEFE72BC54E7722E
2C7393EB4C2C7BD9BD432917F2C9056A50F482E3063F83E7C62CA1C70D527409
7D82B2990CD1A7CA773A5DE5979FEEB3CA7492D3485CCC69DB14831CE924D7A8
3DB78A01A94737ECEBEA952DEBCDD7E422D1DFBAC32EF282C3E5B391AE7AE15D
ED577FB9DF01416CB009010EADA24F3E1C076141610B2411237A09D59BE0364A
20E1CD1DF44FAE3CCDC0C03953B48C11E9B7295BBE5F4B949E0ECFC14148E977
EBD03A9BB35D6C590A0DF06046270084CC0506E6B4A59D518AB6254720C98D87
DACE87BEB3F0CD6226726A069F2086DE30BE528BE7F28340DF596A7C60E7F84A
4A207BE79C7B420C3088ACEFB083B28210AFE026D3FB8C9DCDEBB84B26EC0BE1
EEFE97B56AB300DF44CE647360CC4B36BB421E0076B294806FCD23AFA50C0597
96F34E9146F01E1FC2D29BB90E66816BD0BD2FFCF8B298DB0321D32FFB793C06
3E4867FF74FEF461ADDAD130C3D3CA9A857B1DE1E96354DFF3384C3CBC83233D
F8030A542AAA43901E22DC4F676C84FA7F05781E926D5C748890C0C25C5254AF
E6E091453575B24128A0DC14B07648090D6CE14031419C7C5E29F73E12BEB6DE
0F75EA453016AB8ECA1414EC5D4C383AF046BF1A1A4940C1E35E141CC5A3D29B
E264795F9BD569E66B9E09A88E8930144F1472566461743D1734487B951AEC6C
B8ADB5422429D4AE96178B5B4F9008CDB44F5351A8822BBC52A59FECB1AC9B3F
D7C8894F0AE9517A42F5D0E11E012749418B89D9188633157B01E8D2B24D5715
1F03D42C2CDC9E1333D44FF701118FDB0A35994E1F22EE5E30F0CC3963D55143
F0CEE884837E04FDC0CE654DB9CDFD12348659C921FC71A1B5F0E3FC2690891C
D793F1158BE9A2A6E00F49A16F699400B943F360AD8555FCD1CBDCBEC6D9380B
10F2202E3B67A41D97A004A20105DF9D426E141C0B69B5BCE3E0B532728CD640
3DDBF371398EFB32587AAAFDD09BFED31B17A8995E4AC5F3F4A4A10384BCD68B
8560A17D6CEE67FFAA0A6A84056BCC577277B4C5B6FF5B8FAA498A270EBA5CE9
CFDFCA3909A7D2AF0CEE6B6002849883B4FD781A6512CA753BE3AC8D5363833C
A2B0A554F0C746BAC6D6FDF264369A25F6BBFFDC8B333A8A1FE496CB5F63443B
DF6995C7687D7A67F026B298032C5D606886C93B8F18F10FC2D0B437D9299B06
4FB7411805F40C020D30D0FFA2100995097708B9293EC4E199E647642452CBBC
9A492FA347FC7BA6507CD3F2B596206B4AABE78D8B1BE04DA4DB7626CE1F028E
6BA7AC8DB712B98863C6AE9F478B094F469AAEA1B41C68B0A5EC423034A44B80
146698B4837897E257F7ED13F38B53A6B02235D895FB6B1F83C46402E7454916
A2E0999B865527AC55E474BB2CC52D070F2D1E2D464AC08EC395B827626C12AD
01E2CE117B619E8CD576C612642DE57995F37F8451AF8CC3C86615FB356EF921
AE2D24D1D1828CBF70103551645949700040D698AF360BAADBAE40165E9A2C7C
481107B695765813A1F18D3FF63110369A61F6788F0E6FEB6E51457592603A06
431C93FDCB7B4FCCD7752FAB37423FC656F36FBBE769ABD7D59C4E46C097988F
1BF25DF8B8CEDE187181E6710D8B7A68C724AE2AA514948FB6B901D5417E30A4
475534F480F0C943432067FCC5AAE78A34DF2F3846E422FBBD11D8D6D4E10A2E
30DEEC3E30253B28A6BA7C132115D6B2068C656F88192F42E63BE821E21E2ACE
8825CC15845C9C4F3D5D0187CBB5793B28E6C3E2D249988E12C30BED5AF7E6A4
AE77776EADBF22F98D3363FD3B80C6F4137B3EC49272280ECCBADD3D2A8B2E8B
5C0AD7C35EC1A787D29F6FD6B43C894EB2E74CB449F9826332309A0C54921EC0
1CB7297EBCD9B1C4BA12FD215FCB16596E3BEB66FB67C8FCC08BD40DA77B4F13
10C36728CC62C6A86CAC60E4FE8EC86F3D3E5CAB26E2447E9651AA4FDBA93864
0BB1B0280D821BA6D58579D2D32E97F282D117FC43C2BFDC052CC32848DCE449
E6DCA3D4F3793CE951A0E8C59C857470334A75FC117EA6F0A028FBBA798DD8C1
76758FB8435925D6A45879EF93FD6E5D24B406ECA10758CFFA013EB26691ACA7
ED8D671CC7E9C301B23660839F8E3790B6D4FC0C6ECDA6F683A0D9E37A5D28F4
2FDA22905817329C348AEB90BD4B16302E5B64D5DF72EC9E9C4227D1C2E3AD1B
F2B9D3DE1F6ABA98B2CD1B5AA1F71A487A369885322E67CC90A4009257716E45
98C4C8F217273A1B7CF287D26AF75CCE8EB2DAA8097AD94F9DD7C8972ABA17F0
F3D5D7A3DEF00EEDC1FD8BE21ABA81072D4EBA4D9BCF628DF9089862D335D85D
276F95BA7992E73CBA780B53509B0292B82130228C96C8577860108F4FFFD52A
2996F42679F2955D587A7ADCD245FB5289002B4B1A0F019A60B358256BF3A569
AE4CF204F145E1F974E56F77AE2A2C5638FCA5CD3D82DA789C3671CDDB220A78
0806AE4E7C2B295B0DF5DCEFD063132DF328B7CAFADD41FC2AC0CBB1B90E8D26
9A8564A873A0F40038962E6CA942B71916B9EAE00F9FC17E478FDBCA6DFCDED1
B6A46A236D3BFBE36B9ECB077E39A3B92C77C0D4640FDA44F072A9BB99035086
C7C4A5933E38B8968B17479CE22637F6E60C250C5F23E4E84CE41BB6F870F0D2
3E668116765CEAF6A3D72819035C82BE60163D914BE0193B9D2D987EB1187D49
28E917695628653915E5957791699139C963054088952AF637B241B56A087983
1E4FD895D4F4AA38CDD4EA7E4B2929E724183C04EAFA01809106976E7302A7B4
AA8D3FBC6965A2B504EFB586756770396A26CE6C7C0DB5B5DCCC94EB32DC5B81
69B6D279A933B07F34BB39BAE6C63C0DF9F93665806549E027F8A106AF7D0E0D
927FD3753BD5F4519CF23F551ED9E242C7A4E4B88E4BF1D89B17076272EE3C94
3B0D14B11D922E732EA474D63987A5CDED4E2ADD8B61B05DE52DE705AD415F8C
410AE989C1A7871BDD7401652F80ABB4FA00D8CEE369AD526BA4AFC36B97B8F7
DC38C3961E0F674D8EF9D007EFD699C9AEA7B40B77E46CC6186A87FB941AE20C
1500EF0DD4DA87B353973D6A19E448B6FC7A05951A0B51B5948CE57568BF0AB6
9FB409D271B36703EA3A8D43443CF0D486C9ED60BFB0A772F1B6DAD4366C2A15
12BD9A578AA435DEBE6ED18256603BF6E0AB0D1066022073B7AC6771CB63C71B
89A79366B7D5FAB77DE9DAAABA7BB37F8D86996BF71D4AFFAA184BAF3B26237D
08A6C6174E364ABE385FC640BD654F5837F88FA54E07AF166802FA63E584345B
4271059A2AC16C29D01B830CBF760952B630EE638CAF67D5B2814729284673FE
546F49C006786F4C1FD61C028CBCA8B57B9EB5FDC6A7880BE0453B4CBA30CF0B
6D8B2FFE215058D541F578C05883BE11D956204D3070105DBBCE6B8F429FE05A
288EEBD3360633993C68B4151098FED33248DEB328CE5BACCFF6127CC599EC06
C87CAABC3CA4E60BEE01832D9B7FE9FDBC300846265FBCA96C002AAA3CD2A6C6
21C0344D643DE51F3DDFAB792935A38BDB7A8480F023402DFDC0C8CEBAB4CC61
8D94F98E56EFB6B0236970B82B1711CFC678630D160D14F0172BD8D8341B89D0
D566C9E249E730AE4DCC69F26B899FE3DCFBF241245D91C4F6BC7AAFC5674BB2
4ECD740B3AFF961B96847B2F92CF604C7FBC4971CC5F3D551541087B190695B4
2AE289864536843CF279A8D02D82B990736FD04BB96B40CB94D5FCCECE09444F
4C60A2FA4A6DAFB85A39D6B56B576C72E9F0D7B76398E8CE95C6D52D1095621F
1E3D777AD25ACF0460D2BE0E8A6ADCB76D0B7A4C2B6ABF34FC29ACCF8B70059F
96A45FCDEC5D6C77F30A2060D9B59D90C639C0EA92C33841F7185772C585B4F0
D46CABBE0F03F799935C508E4DFEAB38573B84BA809B1DC6D17343A398D20DAA
7E7A71A410A09DF991519EFAF762F6728C04A11C6018F803E77CB060E813E2EF
325F26C784699710D27284A17DEEE928D37986B0DC5120C68499E54FC5B7A19A
75C64B2735DE82909779BEC1C9E6C5DE31D638D6F160C99CCFBEFBA40F177374
3987CC72909B099AE9C6C2BB1487BEE2A01FECFB3E05D3FDA4C2B3D14C2F79B7
9084EBC2F2662A556E810FBF557D2050F023BCBE7B71202C6B210BC181E7D2A7
77A5E784D28E81DBAD3E7A4EC921660AE73071B76160EDC7C43CD449527468DA
5F0C99171828875F4F74243AACDE4AB9EF6841B6B0B553D0C82E17ECD77939A1
28C657EFEF9E43AC3B3711F8C363C4616CCDC537B20219DB60823907DFB5841E
D22D72F6A7D21855DC8FAB6C1C21A54BEA0BE87E69DB8774198AF4D5D8A346E8
96FE32479F5F54FBAE30EF6FB3A0F9D2EDC0301FBCC31A7B112CFD12D6284514
3255E938D8F16F13DAE170010E274A60C055DBC4CE1997A06DEF1DA36F02979E
1A4FA524D19ED66E11BB65FE097891EA42B5DCB3AFAA0DA613F5DB640C8F138D
525A2D7EBBE3DAE407A1922949BD883B170D69118D81613B5341268135781434
E2515FF83F21B9A9F3AD826E932D8B280E92782ED613D1B184C37F4E3DA829CB
5EF071C5C881DBD1CB4B52FAED0C72AB025AE8E6F7DA3579EB43FECC9DC038E1
3258F3C2F9A57098B605C885991025CF9BBD909A6F93DB0DE07FBBEBAFC9CB1A
87A6A6773A5A5FC417B9F31595750E60B50DC0A5CAECFE62543F58DB48701D03
E88FACBEC40A45C3ABAD049917C9E46320F44D43BEAA4F93F84B5C16757919BE
D4797E32FCA9B47D65DA72153B5DF79D5A27785E261DD757E6C716D757F92471
527E4C7D6887657D0843820E466D2A7FF65D671BACB3E4D27FA7C6F0AB959714
A7091BA3B6AF4A9AD38D2AD17418B4FB9E4DE66577FB6B5A3D385BF98C240ECC
FE987D4FD412F2BBC8751A7D63BEB9FDBE00F0A2DD9D8C5910D6735EE8FECC8C
AB4B8A32DA59B7DA5061F4DCA0B45F7438D81B6DD4FC9243951C40B597757C0B
7F60CB8A205FE58AF5EA3BB43741221F914E537800C77E62C835AE18D78659E3
DDB8127F8B5855E70EF2C5763CF0011B4D487B9291EFCCA74E6BC9180E167A7F
0EEB0B392B41EA68AA120651624769A34DA6519EAA021A3CA0FEFF9BBC2AA24C
C3460B8B7171178273A2D84B79F6655AD9847D3DD61C256CD9A0E501C312B746
F6D502D338C71FB5B6E720D352191153B5D2FBAB1D33A265D8883219A37E8072
28344A8558D83A653B82E6D079F0DA8B90B5AD85837074295B576F3B4B9E6019
F7CD13EA1A850527A6B3F8B8A539D8F6BCFB729F3B1373408787A2F7CB7C0CC1
B4F2F6195F418C6266494548B702D2C26C7FAB3C605414FE46819D699509B903
29F51885A2BAF05FD1D945635D35F9982B88D512073F3AEF23A461A31EFF683F
F352030967C985D706EA2F9E2A3C7CE5F6F0685F57B73A7C988689FEBCEE7B18
4D760D7C2C5E257F5618B7A41FADD1420F338D03E51966B9836E09BAE960EEB3
2A0761DF541F3B7CEEFFCDDFEF469B10898952F1112A1A55C5F0DD293DD92C15
F290B0A25CB034CB474F6168541C6816A04F8D70297372F8F5E3020B874472F1
8F0DAF1DBB5DBDB97D5D50ECD6F45A5493A8A1AC6890DD09CF8958B0568973B5
4372E6DC0A558CC41A08735BCF834F05CDDC8D8AD7E77BDD971BC0ABA6B1CFE2
7D925723DFD34D311F60B036439CBC1887E9C43A867DCFA2A8BE46BE4FA72C73
04A2A6F64597F47214531850E037B93CBC373247214DEA5F4EB47388AACD59FA
F82206CB6FB75857F383FE8C281ADBC97C0B4F0C13DE2C9322DD14DF8704C296
3368625B64F65DB09D7F66166DF437674C299D00864CF5835C711FC5D991EBF1
0C4741AF2192FB2E46DF0C7E346B99504EB39829A7EA58D67A6793E58D9B0216
C23954C4750F170DC1108413F98EE2755E611815B8FF67EB1372437478041A46
21D33272530737F0E518F10EF13BA1B635D3BD7BDFE68186748091B18814C458
5D7C35D4D4DEFFDA47A997E07F760BE61F9CB2DB399A4E6BD3DA34B59A34EE60
EE777CC829F06AF8998C487F2BD8ECA7963953CF774FBA783C8A81942793CC92
166B02F8D2DD0D2DFF8877543138BBADD448E093B19DC8E63FAEEE8656904DBD
B3D9FF52D1351F3C4B9A4E6C99337E940934AC13B0DB7ABE0DC3959013F5DF1C
1F1605B265201B03B674B8F6EE1D7276A8329BAD6227720942B986EC18F74736
5FFA35A8AB5C5D8C7A8A2BD0B917C682BB9A80F9E3B01B3968E85007BE96A2C0
9325D003F7987D3B46BB63B849590085A4A21E35680AEDC16CA76AD8F3943C3E
C113B28DF0A9AAB6CE593F14F8045BAAF277BE4137891FD36A106CF0DA6159C9
9487506A6FD23B62710B08955374D0A118D9083B5A64A7143148AEA21081D971
8089175BA208456B7FCFCBCF7DC87319B8E925B0CEA6EAB44C7CBC63A3AB6020
11B1549B3AFF89E04CBE600CFC4DCE714CC17F8D03FC5BB332ED16DDC8E72B4E
2388014497985C8A20CEE676ABD2C74783CF45DE67ED44C2DEF8921E3E81BA2D
8C1FA653C5D91594C18C6A7E2342570075E1725FF6372F26B836C9907D2159F2
67338F3689FDDA47FC21A91605A25A9A7E156E4B975E02810780C7B32BF1DF40
4FB79588111BC46D74D4FED22B479589ADD2193A03823BF4F8EBF1FED00D70DB
184F292CE09F740F3E9064FE94A4DC5EE993BCE3BF0348CEDE74FC96A7B14034
3990A8C6B967897E7AEC917E3323FC0ED30098EF37B4F34A3341E27B18A0674A
CB4EAFF79F9E6B827C883B55FE80E611A47C6F5D327649E0D31931F6C9E06307
CE44DCC844DAC2CB72ED5717930E8424FCEDC9F40351B6CC11C58355F33BFD58
7868E8938D8D46B5C28266D4AFD0E60E412072E38D69EAD899810C0620E8680F
AF7F413E30B4F2141E98BEDD2D3987FD9022ABD48E5C62ACF55BFA34D089120E
12CC20F56057717623BF04CB028E349AA563BF8CD2AF0AFC345B81F5BBDB421F
4BDA2F8587626C40DFBDF4E39956DFFC00EAD3B794341CBF4A0E265D6E44B74D
4173329DECD66EB02FDE64516FC3389CE67C1CC6198081408A515CFBF1CE44EB
D4799538C9D0DAEDCCBB2A8FDFC5B51F9765B220250B22959257018C2DD18182
C6D235B6993509C292BB72947F892942F22A0F17B7E0588BBF4C66E051C94E53
DA44917AC4F2F8E2BC595D877B8D3C339ECA663C3D8A4B112EAEA09899E29FBB
18480622351DF0876724A36CFA55DC91005FD28EA44F455D8949189DFE6649E2
F29D07845EF64F0F9E2AA520117CF0740B515E08998079C8BF28B7F5768E3B11
E8882F96EC4B5B303C978EFF153D284F990844C9C2A1205B12F9941DFA02C880
EB8F7A9C28C62437D477D177CD8C1747CB45E629FDDFA227D01DEE281CCDDCC3
BC0C8483347C12C8421C82CFFB172F635293A7C8C1D289E748C61727E9D6CE70
3572C40939EA491E125B3F0E13ED85D52997D2FB3164AD8E615BCCC33AD60034
55BB82737F7B73E421251AA7AF4652DE3FC35783BF9916B578471F97F4A701B1
3C4F1D00D3E61463E79CB1851DE9B815CAD86C295139A2CC1304C59F54FAA5DA
F767F9F09F37ECDE8C8F0581F3B0FF723A2CF085519E4D8EBEAC15D15BCD615D
BDA83822EAB5CAF34E3525836A713AAF25C368469542DED21EDA93E823A92C79
FB4453FE75AB9E15C96EAF4B62B02F074B0EA5FEB13357BFCE5886A348CB24D3
F051F3AB0F70E5C31749642D9A7AFDFBC186A51375BFF2E724E3CD86FADCBF55
98CC8512FD01790566D91C679E3B2B9C1744661C47DADA4912E880BA28E6A599
29506B7B6DE48D3B918DBC8E876600D86B812DC5F12CB5612E04A1B31563356F
E075E5408E94B10C7396A4480B6B40F639121ECE474131DDF6AC80BAF0A28299
C9C54AED633DD7BB110138536BA2603BFC8F2B86190F98EE6B20B4A138C693F8
DD00EBDA6F1CE34DCA0CBD661D2D839FE4E29BB8CB0FF999DE3BC015BD74FD22
752DE578C117F178F65397A13BF7C55373FDFB80C03C8C4FE036AA6B16BC949A
AA79087DC22287F5564F51DD51E1BB16A278CF5C677DE939D2D66749D03E5AD7
46C5D0ED5CC7096FAE44C3A39EE527829E45069BADD2AB5D64B57A8E62615C8D
3863EBF812AAFF392D025F97722C3E12F38328C55B084066D5E4C08F92471244
357866E0A64A120BA10B70D3E4314C5C155AAF257E27249F2538D106420979CC
17ADE4BD152373E5B2375E9565A964F3704695287E584EC46763AF77E30DC6FC
E6A33D31B9464E62C09EE4CAAC54A8E05AF47FD0034EE72E3AA257935DF0786C
6FA8229814F9E314E7A55C41ACF93532299A247DF8FE0F05BE4F70B147C850ED
283C2B248F77F60C675DB31DA3027D64AE5D5562A35658C55674C6C45216279B
636416A5CDD8FD2D87AF11A59D6C526F512F68DE7BB7273510A9C2220164749F
CF8E81808EB87BBD768B5772B8F91BAF8C782D35E1F5037C0387E155017ADFB1
DCA19F653E1C5E6E230E72C2C48AC8D9474B9E8D2905EF47E02FA1EF15C36BD5
0317E4170E8593B28C755D78D7FADFBDF52D8634FE9F0DBF8F5BFB065038035E
CF047E663327EF3B74FDD900765D504E1D67AA4C56224190F3B0EC7B6015EF3C
522FBDEB9DE7C7020AC781C2F9395BC40502708EB3653F8A31E13BCF0BB17E6D
1B225B5B62290E8002F75F90E87076CA1A52643F506A8B8584EBD4AC513A3C98
2975BB62D0EBE378D9865780C3C6F9407736F61AC04ECDC6E079C1FEC1B947CE
AC868E7803AFE0C20169C8509E277680CD70DD4FC045F32A6B04BD09412EF8B3
FF3C24AF5EF7DD934B28769F7BB109273ADC0EED489D2070AEB1EFE624E98A59
1CAE08F818F43EC3427B808E59E978D45AFE20577242F31D57FC2DACBFCC1A1C
977D66BD7669A0F467DFB7E3F18BF1DD660B62E0804EBEE7E60CF9798E6D311C
A8ABBB33416D2725BC7BB91C0C17C658FAE7865D9F54DFB0A7DF531F8A4E1963
573F03E2F599EC801D0900328585044C6F8D0F74F7EDB4268B58E543E391AB08
5E7446A75D52B8D2F61ABE65BE2A33A207EEEC3C398B8F9FA8099260F16DA5AB
0B6AC1A48B103A7D6FDECC83766E48F8252396FF74AFDDD8EB0458D02D522AE2
85A39B8DFA83BBF239A825A7F5FC282296F8DAA8AC9E96574B1E2F581ECFEBC2
B133CE273629F0F5059FE81D08707FA72DD8C156104B7C1463AFC8D5FB93D4FA
F53ACD949E91446BA78511030DFC4D18E5BEAC7054DD32BA596CA0BBAE056825
8C2ED54EAEB9E20AEB9AFC48B1869D18D0C0861D3A7DBA1435851585C9C441B0
1D854AB258B7B48769CB9F98FA3DBE5FC698DEA0875C10AD5B2529B6A3D902A1
D13277F0D570885CE30413AB0F08263F626251BB1F4E609E5BDEC25FAFCB338C
548D44033E8D9059E3E09C2E3835C551B05FAB28FA00A896615C41393D59A4C1
F525CFEB87935AF2EFFDA3EB3F5AB1FB0E9F2346AF1BB29320449C42D1AE28EA
9371E4E048EFFD40DB3DB44751A154BDFFFA61D8A8CDE9380D486BDFF9FBB4CE
11B2282D9784C549F2E7A22C7805397347BBD5A976891603B0E3837A2C9253D6
139D42E2AA370BC7C2C3CF813D227E8ED6853E3B04F3EC366C9F503368A61C2D
8B59FC75DF167ABE70B6DD5DB2235972D5D618E3C9BDB5D8CBB42C404AF3F7E0
366AFFE7EF7C6B5406CF60D3B777F6785028334CE2CFF51A03412FB0D621DA2B
4EDF6AB086B4A133AC9C6A405D25768117D9CD6914BF737FCFF0B2755BB5B196
D7B97BEC55CEB5A0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 61 /equal put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E5DF0434D2C607FC82C9EBD4D8902EE4
0A7617C3AEACCB7CCE00319D0677AA6DB7E0250B51908F90A32C4175B6BFB279
024EAE1B04D721A6C54FD62484F8949B2CE9B87D9CEE04DFF82BF14931B3CA03
AA5F701B6F80BBCDF2C427C40A51597F0B1BFA25EDD7CE0EAF2EC676BF0059B7
15DD5462BA30DE78A08DD533DC0E8D85F9DAFC5FD842F417265427E0F1B71834
D2BF6EFAC3CCC40D3EF3B2E2080F148441BA45E5D0C0F7D8416730AF4BE4FC93
1E965594E0364F0D4F1EC48004CEBDDAFB1F0EE0A8222358EAC0F62E6BFA3C9F
46875EB4C999219B91E6147A49A668505667030CDF3495682B79C0F614AAEE68
D976EFCDCB04127C0D7325A2211E49CD316935A0B472D1F9FFC68F7FBEBC7582
036CB393016193A9783DD08D647E89C5BA4EFC8701BCCB6A5C027C4FA8644C06
251B9E33FFEBB1B84AC4D4B148205C8CA7AF5EF97F2788EFB0B71473AD0F5EB4
FC43F46602C53E53F5A6D1E445439F65967C51EAB636178FA377DB2DDE5FEF41
9E91F3BEBCFBD3B4EBB510A0DF7F4D19C6552BC98F10E25612B1396020D7836F
A3D3C865661DB276E428F09F048A916B4F07D8FD01AC1942A3CA342B0E531BF2
3E9A7AF265ACE1585E331A8F8B5AE06FF085C1F349215581FC7D68D16395D934
79B3BD866A4BF33913DEB54B4D00ED5EFF3313FBD1C5E6AC430567872BD935F2
AF1A3F892266CEAC15DEF43BCB83DB075A69EAD7D2EA53303F65E04C5673411D
EDFB32156120099AC210E623BADDF2991F96813AFBC1126DF53A0A776AF7D61D
9E03581F22C0D366590BE5F0147D68C3AF68F9C249576B95517D079FC8F140FB
C5EDA351281E41FF88D99DFF43CCE7B7B9DB269FBAD3F9CCE45157C1E0913107
D4EABD6601B75D24ED62DBA03392945BC6FFB9486A3B95953A6E759786460E60
E88B89FFD6543597A2EFC897B23FA2631320A3C85BC34F9ACF802AC96DDB756C
E23CAA5A7F8B66D23136C74DC04317E8A40E2CE208D84D0FAB094B0AF3979796
CAEC04F1D49750517C2CA62DEF4160E0120A64C829084791F4B6CA8582DA80F8
33560E1E4763DE7D6A724AC75E77DB52AEB599D8C5009DD89DEB4C4567A7BE6F
097D26F368A57C63E4676593738813C94ED1157B1F947E7D9ABDA0D22B15173D
5A85A7C58E001C0EB0B8F08785B75387A84FD31D4EAE47B4FA2979F5FD167DCC
C9B633F820C7B2B893C89393EB10015A547472F4968570B75520F5D5D7DA5A38
0EAEFDF7A2E26577F62F6691AD3406449217CB8AEE8E3C008C7677873D0CC656
827B1BE80926C5EDA2AF57AAEE3F79AB283108AB749C7360E93C5A09A5920FBF
E36E63A6444A5ED8F1C15C1C2FE500C4E3FF726866D8333D80794C3F0E33918B
CBDC61EB37DFA4F4D93126E1F3D6BF72DEAFBE6FE4D85B8E60A1BE6BAD2FD8EF
C533080BFA8B883F5EF8EFA8A4C533A3DFC02218FB71ACA859A7997041E29BD3
C172EFBFE622BB8002E05263C4386AD34C00F607958EFC9AAF59EDECC976FE77
C7B50AAFEB8B7ADCB906D4CE4859F8F6000E1978A9EC8E6C7B92491372A1B97B
2F95EA0D1144E618A11623596539A4A775237BEAC8AA4888B84F17651CB36C11
352B2A3C1D4AB09011FD62885EF8CC0C5D06B9B4FF71460082F54CE72B5A35D7
6E9ABA0C890610E0BA1D37C014BDEEED784CACE29CE5661F12AFEB5D90121B11
2E92482141CA27435146AA30DCB8F5A38559FA4CF78BC70E41598FA6AF59CBDA
11573F37A7C46D3BA2AB2F69DA60AD2F8F1661A0F319BE424668B0EDF62F53DA
BC649BBE87BDFE7986E68C2DD91C8ABCC096CBB455160AFC9B93BB8AF4D1EF39
856AE520EE05EF5D1D6D0E0D6F2310D2BB275DEA160F3AFFDE9C90C996BEBADB
BCA4ADA86331AB479CF53677A51231A3A527B3DFC92E323586051C6D04418C61
5D5A3120ABAB8D7ABBEB18BD6F009D5DC293043A8B190BE2A28C37F65B2CCB2B
3DE444B6C1DB3F6E962A7889774C7CA8ADDB5D75B7F6DFBC55B8FCC55182826B
F64E5BA029D17C5E433C82EB6BA42B835D1928807A717A06AADBA64CAB46D849
7362DFBE4AEB013B2A5088EF00DDEF034E7F2D91C3761FE98AF1C3897B7317E9
CB7DB1BB062B7CB6C00A223A27B5C84390565FB85EBAEE918D7500E84D65F31C
22A22F51C2C56C0A526992C991A47A8BBCC4A354E51805A44227A3D05616CE0E
42303E52568CE288C6B83D8E6E31808D4298CABDA0122F0CC3E7B3C7F9156625
07243FCB22B3B25FC1D3E4B79B34D5DD7E557BD95036E6AA2A2C0CA3E469CA7B
9DD7F225859905C22E5488A4DA2DDE3E9F05BCBD62B55507357CD718241FABCB
84717F9985BDEA894B4E1BF8205E8CC654EB132A782A53EB0349D5ABC2A6477A
62AF28A0F0C720908EBD2EFB264B9BC0A2CD1CA456C42B531DC0CBCB83E9FBDC
DDA4F018228115D41B3D12EF1459BC668C8623CBB4615D97AE264F4FC49187ED
9C4F621715927774539F419D6C9386CB888E967B3FBA470952447EB33D30400F
DEBD89B86208E62E757231A95EE46DB0E31EE1E6AFB086EDD7FF6C18AD73564B
61DFBB58F51CF78274A1435B51D14198F3F41A4373B4356BF84D33631EF24060
E96E26AF2652333FF7C2C57317EFAA63BD9D01054F7F2E6E2B9AA3240ED2A5DC
0BE907715C06A9DDD767C9B8470D1E93CA548F797D43B6E5C7433F6155C7D372
2D52883434BB8A5E1BBD51755BD5A6BD7F253E1F5784ECE7FDC82FC161F80571
0A0D0D4FF66EDC184B61C4D6B7B2A6F14205A63078ECD9AA9B4F0A0110E56924
15687CF0045A164FD86FFBE723B043485CAE8471AD7890A63F1325C7A81E44CB
49B7EC11B08B8EF8383FCC31B85B828D16ADE70C6922701174F3342C35198370
B542515D3B814ABC3D093A249D80065DAA5A4EF9C1DDA5485BDE581567670FEC
4D40C624353A84F3B32D600165F47D6C106D9B027BE1044A033B9EF755B0D241
F6349DBFBB8C43924BF5FAF486D8F40F370B9857863CD25170893CC21CF85B28
1F1F70951EC986D4F91CC360A48AA8D08435FF3C0B1B4306747037B16C1255AD
FE4435469EA4E6F78BB69F787D0C83DC6D3D877F222723C036236825AD13D354
5DE002B359274A371E67356627B6660426F72B808FD2188F4C55DD47C551AF45
66F0472E00CFB7D60FF603DA6453288C7EF4FE9B87D38B6FBCD36A85DF9D5F63
797EEACCC5AF37FB1477F266A96F6B1372A038CAF3E958CD15C0251475A65165
9FAA44FB70AAA149E704937EC9055EA0FA9A186EC69DE96B2EA932B9A1998204
F0C5B6C257F226514A3F635096A42BD88CEC9FCBB42BFB1A11749D467E166EB4
7256ACEDDAEC196ACB206EAE3C9A64F79EC550409B1D077FB498C574AF00DF12
9E2268A1B39D87AD37B6D14270D587501F8392D5511FB4315B208D5B3375235B
DEF7E31EA8F5A94463E5CD7DCA9D0CA13311AAB6A3BF6F05B9AEAB44419B0F6F
9A2A59A8659ED3EB096284A7A163C7205F88FCD749527468C65F851CD18D6EB5
BFAE86E1B4BB80FFEE5A25FECA8BF70AB93942E943F807B12328B87CE0A4A4F5
A1FE1B9C1FDD9904978A21FEB5A3EC2A701D7558084DBAA6CA581880BF5E283C
7EF1E72DEA8BC363E1DBBA08A75C283E4A6AE4C5A796F9AEAE5A85DB601A0ECD
E4BF7641BE540D11F605EF504CFD6B47A0E706BEF28BD9D7EA7673F0628BF949
4105B0782F792FF01529E7622D9377F530A0CC5D4AF48DBD0832F3586D99CFC7
67CA5029E7E40262F19E98ED254B0BC20F4C0925E7C223137D1B1F77A42957B1
FD7F2FAE04CB86EB7AA36FC1CF0130687BAE4CD5709FF3BE3A1520A832A36759
011E542905D076455D8B73DABC1D2810928C71F9F0DF4240F522766E29CA89F0
80B970B8AD017E3B5A2E5BF78D90046EA3039561A7D4D321F900EFB5812391A3
4ACA3019ACB2E62E01B500C2C9B860B725978FF26BA0DAC8FB56460F09D52176
157AAF55BC5FC4AE9DE59D5CF64FBB12E61F83723FEA2DAB82D8CFCE87BFB24F
78BE5E8C3DB219F530E232B53F6B37C8B394DFA101E05CC19D9C71611E234BD8
C802C6605734280409FF91B1FC935FDBBEAB9F6A941E2C1221569F96E7901096
D3393E5EBECDA95FACF0297346A1A25AF5C0D41835065C5BC6D11A304625F13F
41D4CD080CCA983ED208D7F787252009A00A22FCC0C6C2D1865D7A40E8E3CD12
8853744FF8710F354BF8A1F5900ED0AFD3A5A26CA1B8FDF9BD023BCB4AB85D77
0BB309AFA68A615A8B8BD16E39CA5A70F954605132CD9DC8564C81FACBF049EF
E4A947047A190CC9EB0EE833DFC1CF9CB3216E580A89FBA04C03D9319631A631
C36F1CEC64C6D37088B2191CF71D336B7A6F22D4E3D8140754D727F6BEA883E2
7EB8F7C162BFF9D4FD5D603015D7BC5ECD381B9B75F96A5008A7C4F8473F9F32
CABEE824BCEFA26313855DA8B652CD1EF11882976F472D4AEDD9BCFDAAB93329
8AC7A3C892DCB1202B652ED089500CD038CC74DD3B7CD78DF7C0924928C63AD1
163ED2A977F5FDEAD22F8476F8350807B60AF379003074BAD46D23730612BB3E
34461248CDD0B2A17C5FCE1D1A75EC7BB19BBD392BE73756A82401DC9A93CBF8
A462304455EA6FF9677EF1BDC3D3FDFC6BEF3F24134593BF9D4CEA5D0C1168B2
F8DFD837DAAE84CABB315B489E1B6D27EB3ECDE5E8E4C7B12A23005BEF75DCB2
C8C74128148EB14BCBC283EA7597E4DDCD97C2ABB754B4A92222DF978B7C0821
C9E1320BD3231431573DAA11C3D8E219F6DEFA655C5BDBC36D79DBC61407EBD1
95DD2197F8886A698D6910852D6F83D8E4CC0D54E6FDA5751700599DA839FD7B
9C9C836FC79D5BB0590BB872492B07DFE5E04FD3804723F1FF89E5903EEDA83F
6D862CA29A7CC5D754DB3595BB2EE8662DBE25F1B15CAC19417ABA8355013191
A410BE673945F46D1DE7A21C83D84F59ACD9F51CFDCC6B8B6576E6C744C22EAA
5D78A19D3C97CB01DAF86835A3FB288FD7757E27048C869D3E407D4E5C2F257C
90188593177F6ADCBA7276C5EE82663DD2573E4423CAEB678C305709FD4AF4C7
AEFE726FA0AAE2FD95069628A52EBD964333129F68AB2B872F707BE02BD7FBC3
028F778A0966AA04445D891C27A52688C2D9383778023305B122DE7FA8FBD35B
D24662BD24CD5A60578EEDEF1C477C0B53615095DEBB903B94C2DB744862284E
8434E9213BA0C371EF36F9736951B7A07F4D2DD4A01646AF891AF3EC38949099
343A9AA79ADC8DD74E87E8ECC780538F7B245FE59A4993C1862D23683D89B82F
723C964CCDD43FCDE33618146DC2E2B7A53399E506BFFDFD6E07306E17B4233E
884FEBF36659E533BD1B90F2C57D66CEDB4AFCFB37C33577E6AD194799B7FD42
975045885B8DE0D48F8D0333669E6B4CB52DC225AF5C63AF0C9876174F877E2F
A848614A9AB904D830EE72225F4E8126B7653D04A0AB21C6A56AA039EB562AB8
1C7312D080585079676439303FF06669035BEB2F47B66AE26BA3C4DF79BB912A
397936561B6C61E530461A08919F98BB30E17EBB0E69BFED7C0A0DEA4007247D
8C8522A0827318E2F39D88D860235FECBFA81FA7F03E4BC1E038689101159B50
65316174C17AC895B0E50187AF2BE3957128FD0385F2D17A61211BEACA829BC1
C55ACDB60425B67DDD23B7E85FD8304779D78B0E1D6F5DCDF6D64BB7B537B14F
232268BBABECCFD3B799954C80494B9306999B4EE4C34B9DF0D3E69395E653B1
C43C77FCD7DA95573E1AA95B21AB5B3CF8EBA285D5BBF2A8E348FF9523EAFD07
F1BBE19D6CB68DEA8E132A69ECD21059A65D72196A5CCE7F64B3D0DA3D28EA9A
4D670197A0EC5966A046002FE2C8F91E5CB763C7E651BEDA5972B6647CAAF123
24C6BF06A4E889185D078B3872519691511955FE26B810253B3685188A3EE328
A8DA2FED6D060DECC0CC103EB4CE060747E2881E70716B1B9B798A8FC6DE20E5
BBC3078F4A0CA4935DB5BA481B72F5287FC5027BFFF9ECED52F53BD6ABBA2934
4C9B3C05B14F499CC386B6B9FC3CADEC2FD8EF30B9D8DD3F9C72D7ECDB31AD36
5CD5C3BCB55C81AD8C4CB58DAC6DEED63CD6F7282E0423701367263C7AF8670E
EA0F74EB2B55601D4A0E897DD47EBF400A30F87A11C9AB9D01B9E4702759FFE4
E7F33FE87D3A3A95555805DF8493FE02E49E737661FAA4FE0DDBAC8CEE753F67
670541BD0E55CF311CE93CD5EE4C3FC59F6FEF4BE15F0A29D6FDA42ED85B28CF
FF0E55E5DDF0812BFBBAE6C8ACBE7D9E01F4EA2F4E23480764A465C8CCA7E7A2
594AC971A1A2C66E0526EB7D88341DDB7669BCC420EB035279E55E017D8D3DAE
891AF2B996B87BEDB38B66F887B50B7C2A17A2440389F47FBA528E3EA7DC1F58
02C31C35536D52DC6B4A8DB3FF2B70290F528C3DC48C291FC36A2F8322A79DC2
995029CDDF242F5A20E8D3B63850D99987D139C359A384C38AA0994443C95A01
23E3527E914874EE551596DDE6F48D8F27D35E8EA75A1DA0C758374A6949CD2B
1DB12C8684464CD591AAFFE4C885841462A9FD935152F4A539116131BDE3E9E2
46709C44FF5DE3F7E4774B522E81A9204C8FCB190B032C5DDE924681ED832CB3
32EF1B7D9BA684E7F803D0E85BE705A0AB53B502B6CC337E1D9356E7C88F8581
5E8E908D9E0BE88116520AD86D36A66FD3F5B478F67CED9AE59F56A2B79B6C03
5DE48FDD1D5A2AA159323554FCDD028BF97401EAE89C862152B05299F9882FDE
27B9EFF6D62703B2F5D35D11BF4829C1AFE38DA57E37CCEB343287B41F4C572A
803D789EE7E8EECBD44314AF69BB2A3B0F8C67005B0C856D659EB9D1EE801FAB
5DD6AEAF9035829346F6A1D30899D9A9879270CCA9704B5D7A4777278DBB0C16
4D4C1058E91ABC02A694AF0711741B670AB0F85E935CB7513940FD33F7A5E11B
79134F72A46FB7B1EBA9F38F6F4F9CC81EEA1F26F6B07CE7C9719B28843FBE93
4A981FD9C408CA688E6B5712C1FAD2A378B541BC0DAB9DF11B2896759099C934
335A84F323D6A8D869D165DD69E3962344C60D74965A8985F538770C9BC77FD2
C37E46BD51225972540496F05CD80B0F150CF3DC96A1EFFBFAFA1EC6720B68A0
BE37BB29D4DD67AABD7A6674BA8F9C23D3DBC5922D7CF376972BFADD91AED722
41557131B36D46082F9D33AF0BF95A52CE74500E1702C9E4EA0D143C756754F7
8172E154B41596B66D10DC2301673EBCF9F94257329DADA9EC85A88CA07AC040
7BC341EEB96169671AB737715DF5B4ADFD69AAD25EA0ED4587A15F79C2B5721C
BBE6EC0670BF7CE08383A3E6A25D60420DE554544845A1E60DBF96107F450339
902D53B519265B0DBF5044F25471BBC54A5E6EE9C90831E9C3FF84BB2D6E21AF
8B858BBFF0F06EE820D2626184C4E78316DAD8C0229B7A1F6F3D32790F0FFE13
680F15B475DF76CD1A4A80ADB3A2457C6BE1DE0AAFE625819D05B90D1F3B639E
7DEFD49C2C7A0A454244A3BA741C491C8DD7CDF58DE937E24D4BF6F3B5F94FD6
01E8FAE787C08C190C655A8712B8B9076FB8D3E193D437CE4A06871A4DA5387C
A8ADCE4785C6C1D43ED4AAB1EA667C485FF7B1A9DE5F41A9A813444749FADCDF
BE36D59A60D74C66E0D28CAABA70E4502FCDB81045389EA1BB39DB2C28D684D3
6941541AFB0BC8A66DF399B9095B7E714F4A47B9CDAB6EAA9C3A883EE5583D73
8E83D4049F9CC88D2518D321A4D37E9FB112E923DBB8B8B523B0A808247EBD0C
B695BD59D7E933A021B40ACC35D52E0CF578451BC948320F975C9E31200B6F0F
7008AFB85596554443A4B5D8DF45FB4FD0AA9D141B00793010FB1142B753D3FA
6CFCE304F48F9A673B4F8D68E78227DB36358531DDE40F5A1EA84B51DA632E1F
5C21F58DCC15C5E1C8DA60D8ACFC5DB0FB3866CCE6ECB2368426521F765A2400
9E41F41AB4CB0C6BE5F2F2E911A84D9D739E3E0718E634C04E6BD59A77F665EC
FF4E1B3EA8F1E3BF0C29D5E8AEEEB1675EE3425B348741DE0CD41C582D2B2391
EE7079CE4760FF6669C5B43B0616DC7D954A5C85C701CCB9A4A47B7840366BC6
045D4A6A3F7A2AAC32A0C6BA1BC077408375F45D2E1421DD2B597D2FD197397A
21A88E837DF2D0DF15B6A5A44F7A93625CF743B64364BD1404EFA12B9F569998
5938E09CBCB73AC39C8EEB5D26144545B1772FB084B6CE279D5A3D00B6ECA28E
CE5925A4EAB4EE7A62628276AD727E5E647788A490D121E9BB1D8C0036BAF44F
50177456530DFD6F703741FC500387BE8168C8E1609F44982508A0A9E89B5E79
F9D90846D5B61461E9C615C039203197974FDDFD42B9D863C79B3B4B66B2AC21
23D1CC1615228154DE7BC0716F82B09A6A026432703B3DECD8DB550AFD83C0AC
5450DBCF7812A4D86D08326E96EE2F5BCDA9597C8303E8759AE964133B644317
4D2C54332EFCB256C50DF5549EACDC273B46BDA3BFE1932102FD45EE2F73713C
B58D086DDD90C94C4E12C1EAC0910C6AACD1FE407FE263FE4BB5B0A3723A327F
E5AFFBEBF44DFE646C7883FAF362E530C06FB09C57B2B87A66C5CC540BA7B9B0
4B1F17F5F06FFE8B1BEF415E786686DE41DA9F8E1BFEB60E468F93746465C5F5
5563BB754DA1619EA9FFC7EEE77861A6583B17B8E4F7DE788B774D9A5DDE3E60
BD0AD6011D68BBEED7D85FD353A44EEE49DC2C266177FAD04E1D9DA79F4FCC42
9FD2B72B8D0642FEE05931D27BEA59940541579F08C87FC09159DF90D5058DA0
BB7F526792346B438F3A5FABFEBD6F792CF75FBF121BE8B3DD23C4CF05429EF9
11B425F19E2481E5A51B6F958887EFD2C8CE29D7206CA2ADBE14AB2AC9686843
098C50499F84362B08E8E268DBD299A9A681CC7973D9963DE8B9B0E9BB6C460F
2DF03C5EA4286FAAC73D212EBBBD677399614A174C13CFFDB3480CA96F93D218
8F6EB61D78B47C67B9828168C66363AF53A8D8E13B68C27E85E704502F39C4B5
3C35B003FC6448273E8DCA14C7B0E94E2275AFA76565148F59FF7A4DEB32A220
2F5A3629D7419E480FB33B4611EDCC72D34865C26E26D0E58D3BA516C9553DDF
C743A18A6D44FAD36604CD14D2665295BBE13CAFC8BAEC00FE1463BE53F24736
D0335C981573514C19DCD87B98F37AC7EC4CAA9D9E1791F279EF73AD85F2EBD3
B6A0A2E1FF4587596989567AFFEB9C1289FA3B5B70FCB298F4BCBA7EA3E57CD8
B5122E4C6A34F82B4C8A43F65D620AAC0304B66C67EEEE8757B8FE0C7F7F34D0
470283D92B5A3197641843411B5CC8ADC5AB0AC6FA8989395ABC0BB8E9443799
96124CB2CD09135AFE950CC0081E36CE4AF647036B8466AA6062CEE28063F391
CAB7085BA04067959D7A4EE71DA8B48AE70759A7B26B96FC807A8D5D7D5279EA
07D1AFE5B4BCA14CEB1FCD6D993915E678A9A90A62CC7F001376C78E6205206F
340062CFD863B4F25EA15E0EA4EF2596A3C79213CB3845E57A3AF419E10D588F
D923B222E9E11D23B67C42CCB681A3398B658176899996CC8C4FCDAA658942BD
94CFB731CDBBF2DC12BA06941C9A092F4F2F792979E41CB1B6375C8655A33E1F
7CD77AC8CFB35AF9CD091EED7984E035F459B5ED616E67A5F65FB7C9007639FE
FF57420A4E46AC0562D6DDD7D4B017D6333F8A12FD74D6A4796823CA37611A7F
5D7D8A2745542A8D6F5FE00B5A481F5303EA04935EF9A26503C3A14A7FAEE6A2
1D7B4ABA2D3584956580194D3D02114902A9A407236F527EF968B5330FDC7C40
AAE5918A3541CC8AB37E0CF8EFDC83C16725E51D44A19185AD14BD0EEA2BF06D
4192CD2E083BE23B046997AE3F63CB12044D66F6E76577274EAC3360177F56EC
00BB6B0CC0BF11B051E97F32617E9EDAE60A339D04F977119C9E7040011EF3C6
EF8B44E41A061AB4581BC27317DFD724289A6663A5183060F6217D82105D02BE
4A851D03464476DDC707C0A585D6536E78464422C3A31D461F0E223C1DB4309F
7B13846746433F27D4A623AD4BA15FF59563A602D7C1984AA631990E0B7CED03
AC87CACDDED5608C4F400A76DC38756705E71637B5270A90438EC408334A3796
04ED58DF96888035F1DF49E7DEF21082F662E3273E78A2E60CC3AB609A3ADBBE
11BB51211AB9C40A8753AF5F9A024711A5C07B12F2F2A320B80EF5BAAF24CD8A
8E742E23338030D51B8D5928CF2D6FBE7530F77795343D4B7C0AEF73F8C74D12
5179FE3ABAC1C68B3508D078B64B52400EE9C543366832068C3BC515A1E9C0E6
4C09A30AA346FE229E695E8BF696316FA47CD83CE4A8B5AA094CA9FA72E5B360
9DBDE9CF6E3E8B1C19622F9463705E1397E566AF8FACEE3026BEA4BE00E79DDB
8101AFDE5F6DC2B2AA35EFFF3C8A9DD15E98C5B00EBFA40A721C5A99B6AC97A3
AA39216CCDAA2FE42959D99EEAB245ECB2BD1637D8B24FE32A87B871B6DABC8B
EA331E1F63357464BC2BC634BBE70064EDB5613DA53D6567B8B144EAF1D6EAAC
6B647DFB85851ACF6E70D3B638BED6263EDBE1E082F1E4F70359E7B50FC3A30C
F6081896D264FFC9DD15148DE5C98129B4AC9D4C727D84F74B3A4CA5AA969D34
89F0CFED3667A5C2FA1AED09330C597B00F8BD326BD51EB8E202FA2993487834
AE2B56AC567D07085891847D744DF5A83214FBD4C5F520F545B7E4EED7B7D5D6
3B836708A44E9387E3D0C27777EA0B1319E7A2FB7FCCB6EE7C58170F878A2C2B
F9E492D6CBEBC3C75A78BA7224CB5C204FC4720B4C7856410B77F2F842C179E2
94DBE9D33EABEF22491F263C006EF7C4A02E8348188CD5B300D56BEE3F345B7A
132379288F365311075BC90D230EE24EB377253BD895F8A43EA4B7E119FA9E8C
90928D1E1280367A4719B7CF8079FC6EEAFF5827731632F2D403DBB6E214C89E
401FB5EBFF2E94C43C2946AA3C68347661F92A29B59A4C0FB23A14B76CF2A8A5
B1E37894AE95F40F9AEF9594253C19D51210B0549FA91360BA936C0C4BDD8F79
ACDE2E17A0857D536B7B42396DDE82A02EF8DBC3144EDF06BA7A20A13755E4FA
1CC146A01AA604B68A5BC5F432E5380A7C0BA5E37F58E2F1033B58B488E5E7E4
67EB9126F0E6BA1BCA4DBA314263C1EB69BD91FCBF9CD9E35C92AF5B51AD2A91
446273BAE0594CBAF569B63ADFE10CDE09164628CFADCA94C839B18C1BDBD136
96EB3E70D800EE90AB68AC5E1770889ABA716E7E82D0B829A956F23302CC3F0D
2EB12615D2863050FA05186C2C6A9B6693A99F61313BA119FAA41BF0A7D21D8E
B5E1837D97CD94BFE131E24B18E3647703162174141F0C9794F3880F9A870D77
373C6651646DC355A30205B3FE70C34C0C082BCE07EE5301EE044C15BCB6F523
14267A5BCADD868C89448285FF60C63AB824C8EE1BE25ADEA23C76CE36D2C425
64FA17E8D0CB0748D78BBFA93678D62AB988DFD0CFDA586CCB447217ABBA3A93
8C0CC1FBEE45CF995A395E026CE084B76D67AEEB3DC70BF3B05712F00A9FF55F
634D2DF8B57239910C707DA631F3C194DFF8FF539F3605D85C943E6A4EEC10A7
F1D1A0479C3D28AFD61CAEF415EE7BD0AB14339E04DD1A7013D567C66D131E28
E351110E1A18831A0AEAE5CB88507A1D3E7DC01868BE82E82896A311425652A0
FD309431E9D1DFC4CF8418FA3DBCBC761AFC93EC8A68E5676F39D3721EDD5B3F
BFE6AAFCF3544F12CA1F9F7AF0AD71E18E3BF0D7FCB74B061266EFC5C78D19F6
02CABE56358C984FA5045C2BE152C73649D22983E692D3175743CE23CD0CBF36
7D03B1A8D5F8D34B191585D85AFC4937A3ED9C279C2675C4C050C207127C7B68
E460FCAE796D4ADFF017F1607AEBF268D510CE5BE432404A189F8ACEE508FF91
1624FE95DA0A2361BEEDCFBDFE3A885CFCF43ACB880689FE18F67E4B0379CFCC
6043CF36657C834C9A2FD50F4FCA8997516270AF02CAAC6675662A1A47684A74
5CAF9F6A3401056063CEE300F6B71DA7B9932BA66854F2214E33F7A7EAE6D197
98556061B913911CDC7E00BF8A3FFBC1F410A6BD8FEBF650C19B3577FA659F44
ACD1CAD6755171ED4C282C51380102511512D3DF919136B94D74EAA9FE5FC59B
12A19377109C20402D08229B057A4D8763C7F4959156812148CB918C6E5A1027
1B3899C1371375E77E858D63E955377A5084D38F487D1E33A001B2DABB69416E
E5FC9C8724C71648FD54358F801EF54AAA5967CA0AA819E89FC67D82B3267FB7
11C41F31674E48F028BFF5F8FEB36266A4C8F7395EA1620853E9A33E8FCD9A5B
23157D47FAF60DEE8974BBBFD228885216837D6357F38D1FCCDC298ADEED5DB9
31AE7365F28D85AA9F0C48EC76636DED87F249B7B6D5125512F4335C082E385B
9FF9114F376D7D7F2A8F06A8C026EADE4D9D6A0C29C89D5397DCE029ACD63EF6
54811083B52C208A66192A8B6D1827EC19DD97F3D31F51FB8A17363C47F3E3D4
DBBC28AA46290E52482F74A68786F0AA7CE1288A3A80DB0FEBF7199C2BE0E4F9
DA22443CCB92638ACAC804BFE5E692750602DFD8D300E48A43C4BE8D02184327
C9C5D7CBCEF4A0CEE0739E7EB937A45358041949F16939C54E09C919A444A766
E09D2F4F62C967FACFE4E202B0A4DC3FBFF832114A7C378218074632983FD083
6C0208BC14CF5007B97AAD6DD40D1FA3960D4ACB6309DBB96AD32B7851DB70A2
D35379959D98694A84011DB730A201A4E3C08A6246E9CCE59D53A70CD530FCFE
AE21C5CAB9DCA49CC28F486322280C1F71E25D547EC9B99DC1C33120272792EB
185DEF9D4A5C2C517CB1309C2F5261DDC0A6AE1BD0A62C2DD179A32AB01A88E5
A00935CF9828B948D2B1E0A6F53F6C732DCC59DA04FE05422C5A14539DCADA20
EAB67F35150B40B554EAD0E2DA37E26F4F53B7D6347699C4BF3F36B4FF4D7C14
C59D47A4D3C322CDC1608E697BF15622025949453E8C650C74339E955FB96FF8
821EFA4FACB23C6E033B744E8B88234F8310885DF3CB656D0322598788338EA6
D4D0C8B2B46A8708A80862799A18E0B874EF5269DFF14E907FACB2B8F66FB26B
31546FD182405FFDD33ED6C18F7554140E7D51130B411A5B9E1BB3AF005FF670
190A13CE209E32838B35726EAB77A2730DC4D97E1E7B7AC7343CAAAD601C4134
3A19083524B62DA0432B9A30D5F528D5963281CED98FC1ACCDADBB71FA960252
33ED1A1F40073E5F6E379C842E877D47C6497D0FB4245380C505B20F63F863BF
AC6CFCC39836841E0AD9412DC7A8D0D6F83BCA14331792C36BBF6436D643F113
DE575A0BB31CA767B38599F046E0BA01F203598CFF345963B4EF94F24A49286E
27FAB29FBC3C1B6460D46543AC5BA6402C675388E20AB270BE0058B3441F74C3
7F991175DD790C021860D3896E66B6A35C02896AB63E85BE87DE186C94A6B29C
3AA776C956EA552378B70BF4D8B3C9F760573117B86C90A014A31246123F9706
4F94A8D0AD0F432E92AA008201F172236A52C6533CF992A3A4D5698C001FE35C
BF36000DC4B5E1A29512F9DE2C931A8B7232AB2D7CB3512D5B25E4A2DD0A673C
55081FE98BAED804E8311DA6099CF73BDF6AA8D0321B6916B0DA4FFF067D82AF
D1CC0E98454F6D12148F06468B9426AC153AC7F84B2F5EAF1095BB11109D9E66
AA4B480C5C1DDBC173CE66EC1F375FD4C19B5F466E0A085BBF5A0B9E082F5C5A
93E3F26AE1C76EF441A02FDC6B73BABE054021B2A874BEFF399F1B53E69DF2F7
579A073D196A236B9619B161074C5D3EFE64F96ACB34E3029C59D1B712ACF000
5BC7607E20441CDAEDE8648AFB99823181D54FB7B6A09BE68B966D6C3534D873
E433B69E9AE6C901839666E2BE0D46879F525BDD9DBB941C4FBAD30AFDBCA7D1
9CD5E6E4B6C4A9C93831424589E7399213AA7B1CC4305190E6FDCF13DC8B7F47
E09EE9280B39AD209B14999FFB8FE0A79341F386B9216DDC391404742EB01FF4
EF4247020E49F18E25D3F643F3D18476707673D4310ECDFB5623A508BEE9FB7F
BC856D2B589D84840D7B96130E76FBCC05CF308396F0D4DCBF1DFDEE58B0E8C2
9D79A3FEB652D7A8F768C9B56F4C0020FBD0A920A1D3E7101635588A97FC41A2
108FDB106571EA422568A98C16D7BC7343108829CE0C5B65FF3CCBF08EBC5CDD
1C5DEC2EADA7BF6D19FA0725C97AC1F4B617B3394BE1E9544B3E204E9D1E7280
D615F1CD49BAC859FB2AAC8E7924419802A85B71EEE996BA94462EE4838050C5
8C6729E0BDF89FFD156A5273B2D80BEF40367C405ED2D2A9D9BA05E87616D2D0
2641E0219DD6061AAC520FC411E47162065F0B74B5EB7A5AFABD3BCED11DB89C
2B41692493396C409DDF9A5903558422CEF3A527F778FD20FDD2F14EB0FE407C
DA073E6FC92435E878C0B8CEAE675B297C36F37336633953C42E5BB94C4F9C93
6E538A7BD38C65444F44A63EA4CE714320B79879CAE28A6109963020E6572BA9
DD13EF1668800291A9C0BB0FBC5E0FBD51ED73AA87CA62EAE97805EFD0F4976F
2A9787951EA8FA39A929E520D43C319695713392B5F7FBD65D3A4CA212918CD7
64EBF926D3AC0AB3A16A3CB028AE85130A25756406D55513F3A251BD696C3CEC
A6E064347A0D6C3E2B57644071E1CBE8EAFF6DCE69F71F9356100AB458C94C6A
8CA6E864061CF8B346C09D6168C6E1FB0C2D9477BD9B6D750B70CB8E0C2F6A86
BC4BE90896DC746257F8F8271E9DBE1CC7CEFD034CCC9A99DF087C969E5811CF
2481426161E84CA66CA566B725D2012B29B8E45510C989ED1E76219DFC2C6973
FF3B236D5F5D17BB449F8652551A048C080B466719A817D2ADD5DDAC3359A63F
9AED6B8195B118163B7BA529EB7B2F54858ABE0080629F555F105B4809E7777C
B75F64F9621646282EE08461DF0B9789E442D5BFE9F3F99C9B5E8C23F5908E18
26BC75FE0BCB7E5BF9D66A0B5A5C86038048386ABD16BE3F4A49483F0C59166D
FA0E2E8A026E9670CB43332ED087642FA55D443887063C2F87AA2C438B8A148C
CBE3210D5C69EE28CBA17E37D66792E1BDF8619A9CE5A94D80F9DB848CCD6054
6535B2AF4304B82A2FF6E87A59B616471DC79EE47D524B58D52C03A94C07F5DC
655A6700F991064313EF0AE2C7EAB889F0EA7918AEE2B9A798AF47784DC50A6C
BF09A6F9C58961B736B227BBEA3A7AEA3D4DAF0BB30EAE4BE0D800AB667C5364
F07250180DFCFE98F91DEB3A7B9BFB431B147DFFEF998154F957FBD800EC8C3F
1148527544CB4AB131F2D33CB0D58A8BC57C953BCC2F7055A339B2FBE13ED587
7F6B0700620B767FFE77F7C1CAC6BE94166E441A96F57469F3DFA6F741D650A5
B1B7EC39E09F949FBD09FA3024F51041603D5B99DC0E23D732FC4D89F457BDB0
19A6F6692DE8BDBC1D50E75241F0852406A46748CA61C7552813FCE94A3D68B4
F55EACB823F4B81670BB6B5981AFFEABF88322442C0C369293041C1F7ACE018F
179EC624FF11C28C6822B54B0D93F4FC0990935774BAA11BA38BAFC2B24EBCD2
4BD501B025A68B70F798CA4CBCB0EDF53E13632236E7B3568A4C5DDFEFEAA5BB
99AFB5B4811B820FBD9758B61C8F450C5658F369E8B7B269390F3AF683F2A139
1F5A896E9C9685F94063D57C769F0C6FC4984736993895899619653F59A96761
CBAECAFBB22B9A0BE9C9AE1AE6F05BFFEC5537F5B95ABA68A49A1AA46E1B3D2D
C4679E728410A67E6EFA0CE3C44637BE5A247C19BA6E6E5A26333A76423CD849
CB9661753A091161CE5C82771848C52DA4A64159D97C52C5993DFB3E47726A1A
F59859F6DEC9DBA5DFB583ACF6773758C1ABA507712436548508FF8102D17A39
6E6426B832F6FBF67D0E5F5280FC324F96C114FA58998EE670478F5F3BE3A9E8
7F705CE630C30F72251BDB5184F15E81B37C7BED0DF0DD57ED17BCBB98E3FE70
404532885D8900D2C417CD463AF3CDB759A08DD89958E352361C996FB84D5B5B
929E8EA49B3ECE1506131D68AB1BC16CA0D12B111691A97394F909CDBE83F950
CBA350BC7C831320D30AB8484D6E9F7807F04A1071D3ABD99909B91D675F6AFB
BEDE724303797407A12B8E56438E9B00F7AF44369F05AE4CA242CB835678C7AB
3AA081D667E0C63368A42405D98535EF0BA57699DCB23738CE8D7AB5A7089E75
EF2D8F292FCCAA648FB7B1DC064C64740F5DA06BAA148E8B236FE0BB99015A56
341A10A2ED309EA09B621597BA80493B6C870D5D6EE723C8E56D2EB16F7C7D67
103D817AC41445712668FEC730F1E8EE68B83070CEF237A01BA25CF76143AF93
42B4D0A83785F63D2DB3785DB875FC37B38631782FE1E873D636CB4510CF2E98
49709AB5BD76ABF80F03E8ECE57D21E98FB1DFC7A7C5D04570B770CA0175CB02
16D1765731D06343C3680EAFE9A4AC7FF9C094A9757B7087D1FC4BADADBA0F05
664136920F2D5E495D5EC0B9AEE1A9CC889F2D05CB35232770985AC17A8761AF
CC6C7574A9E9C29C195A7081920D7711991EC5D4DDEF0089BB9FB7B3FEFF3B1B
88D832CFF8CC7980DC6B67226ADBCB2007C16C17CF0974602DC42D238FFB1E45
BFE27A18DE687ACD80AB600026708F390E94A110A9B83CF974FE1675F15FEFE9
6F17DE5DB94648E80251E699AC303B0D7F9B9B5B91F60AA057F2FE057C17E376
D071A4AC9583FF6B5C9AFA9B06EE6F51CAC7D810AC49981C1B6AA1F21D390BFD
85FA482F90F24F6D3ECFB9D500FFB1F93CA99CC169925A30D59E27CDD6B218E6
2E5BBC25ACF0BF7C5FA579B627E468DEB630140226C721D80C624A4A0CD58799
385A68ABAC906AF54A5D3725AC486CF5B68CE3B30B5A5341C70DEED381B24D0D
AD43C36B3542CD44284E30B667285C1A2A68BDF417ADE1D60BF9240EF7AAA660
D14013DA18AB2C08C90AC9D5D545555F35105307221D96920D89024AA416C554
D804551DC627B4C85568F00CAC843CAE6AF8AB317E479783125C0578B97E2A06
41EB246CEFE4355EA01284D6F58392130BA083C6CBDCE5C7BA34E147CD701BFF
FD154E91E92CB17A56C4564AC5E96761AC4E4DF91E394149E63004E49833FF13
75C43CAB92BC4694E894CF7AE472319FB53B94F8507B523CF4B9FF8F7E12AA61
1E329388FF534EE0A2AE561AE9599305B23337F9046B92E1EE40FD5FB07FD38C
D9941FBCC8BC8C44F65B58C3CFEA32B90112F419A7168BC1353C39919A2BAE37
CE2FEDE2BAE1718BE751349734758A71F169996FB0E2D3AFD0C704587BFB529C
EEDFD72A7A5E6A24E620A44DB179E8E964A4108CA5ECF1EFCDE554E9A3BCBFF1
7B8CA3BBB3686379B8617CED98563C6028D9E2010147EA2CEC91116E9C1DF774
D072B158BC360F0166DF46461AED5179578B3A0D61E37B86937D753A08904B19
E3380AA8C8F688696482ABF30B79C96EC1FA94CB62DD428D6FDDE0212DBB9C3B
588F0DF7F6C5B36F07CF7942F122685FFE0AAC21DC0BB42EB51E8AD24E6BB961
28193782F78527D61BFDBF2091A56DF09C54DC7E0A3E33BC1057814F0DB0547F
138C2E0B928D581D88BDFA9A69D0FBF2D3E19F4FA1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (main.dvi)
@start /Fa 133[37 44 44 60 1[46 32 33 33 1[46 42 46 69
23 2[23 46 1[25 37 46 37 46 42 17[65 6[62 8[39 9[42 2[42
42 42 1[23 46[{}29 83.022 /CMSL10 rf /Fb 133[50 59 59
81 1[62 44 44 46 1[62 56 62 93 31 59 1[31 62 56 34 51
62 50 62 54 9[116 4[84 84 1[84 5[42 88 88 1[74 86 81
3[53 7[56 56 56 56 56 56 56 56 1[31 46[{}43 99.6264 /CMBX12
rf /Fc 135[71 2[75 52 53 55 1[75 67 75 112 37 1[41 37
75 67 1[61 75 60 1[65 15[101 92 2[128 81 7[103 97 13[67
67 67 67 67 49[{}29 119.552 /CMBX12 rf /Fd 133[37 44
44 60 44 46 32 33 33 44 46 42 46 69 23 44 25 23 46 42
25 37 46 37 46 42 7[62 62 85 2[60 46 2[57 65 1[76 52
65 43 30 62 65 54 57 63 60 59 62 3[65 1[23 23 42 42 42
42 42 42 42 42 42 42 42 23 28 23 65 1[32 32 23 25[46
46 48 11[{}70 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 411 Project 1: Dining in the Matrix) /Subject (CS 411 Project 1) /Creator (LaTeX with hyperref package) /Author (Jonah Brooks) /Keywords (cs411 ``operating systems'' matrices matrix philosopher) /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 150 -208 a
SDict begin H.S end
 150 -208 a 0 TeXcolorgray 0
TeXcolorgray 150 -208 a
SDict begin H.R end
 150 -208 a 150 -208 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 150 -208
a 0 TeXcolorgray 3251 -437 a Fd(Jonah)27 b(Bro)r(oks)3303
-337 y(CS411)f(HW1)3363 -237 y(04-17-2012)p 150 -204
3600 4 v Black 0 TeXcolorgray 150 0 a
SDict begin [ /Count -1 /Dest (section.1) cvn /Title (Project 1) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.1.1) cvn /Title (Quick Guide to Running the Code) /OUT pdfmark end

150 0 a 150 0 a
SDict begin [ /Count -2 /Dest (section.2) cvn /Title (Dining Philosophers) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.2.1) cvn /Title (Design Decisions) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.2.2) cvn /Title (Issues Encountered) /OUT pdfmark end
 150 0
a 150 0 a
SDict begin [ /Count -2 /Dest (section.3) cvn /Title (Matrix Multiplication) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.3.1) cvn /Title (Design Decisions) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.3.2) cvn /Title (Issues Encountered) /OUT pdfmark end
 150 0 a 150
0 a
SDict begin [ /Count -0 /Dest (section.4) cvn /Title (Commit Log) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -7 /Dest (section.5) cvn /Title (Questions and Discussion) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.5.1) cvn /Title (Why does the solution to matrix manipulation lend itself easily to parallelism?) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.5.2) cvn /Title (Optimum number of threads to create for a matrix of size 1000?) /OUT pdfmark end
 150
0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.5.3) cvn /Title (Why do we see a slow down as the number of threads goes up?) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.5.4) cvn /Title (What do you think the main point of this assignment is?) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.5.5) cvn /Title (How did you approach the problem?) /OUT pdfmark end
 150 0 a 150
0 a
SDict begin [ /Count -0 /Dest (subsection.5.6) cvn /Title (How did you ensure your solution was correct?) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Count -0 /Dest (subsection.5.7) cvn /Title (What did you learn?) /OUT pdfmark end
 150 0 a 150 0 a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 150 0 a 150 0 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 150
0 a 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 150 0 a 150
0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0 a
SDict begin [ /View [/XYZ H.V] /Dest (section.1) cvn H.B /DEST pdfmark end
 150 0 a 83 x Fc(1)135
b(Pro)7 b(ject)46 b(1)150 265 y Fd(In)38 b(this)g(pro)5
b(ject,)40 b(I)e(implemen)n(ted)g(the)g(Dining)g(Philosophers)e
(problem)h(using)h(b)r(o)r(ost)f(threads,)j(as)d(w)n(ell)h(as)150
364 y(implemen)n(ting)28 b(b)r(oth)g(a)f(serial)g(and)g(parallel)f
(solution)i(to)f(matrix)g(m)n(ultiplication.)150 497
y
SDict begin H.S end
 150 497 a 150 497 a
SDict begin 12 H.A end
 150 497 a 150 497 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.1.1) cvn H.B /DEST pdfmark end
 150 497 a 100
x Fb(1.1)112 b(Quic)m(k)38 b(Guide)g(to)f(Running)i(the)e(Co)s(de)150
750 y Fd(As)18 b(a)g(quic)n(k)g(need-to-kno)n(w)f(list)i(for)e(running)
i(these)f(programs:)30 b(out)p 2305 750 25 4 v 30 w(matrix)p
2578 750 V 29 w(threaded.exe)18 b(and)g(out)p 3357 750
V 30 w(matrix)p 3630 750 V 29 w(unra)n(v)n(eled.exe)150
850 y(b)r(oth)28 b(tak)n(e)f(a)g(n)n(um)n(b)r(er)g(of)h(command)f(line)
h(argumen)n(ts)e(as)h(follo)n(ws:)p 275 1115 3778 4 v
273 1214 4 100 v 324 1184 a(KEY:)p 553 1214 V 73 w(t)p
1132 1214 V 548 w(l)g(\(lo)n(w)n(ercase)f(L\))p 1832
1214 V 167 w(a)p 2531 1214 V 658 w(b)p 3231 1214 V 653
w(o)p 4051 1214 V 275 1217 3778 4 v 273 1317 4 100 v
324 1287 a(T)-7 b(A)n(G:)p 553 1317 V 79 w(thread)27
b(coun)n(t)p 1132 1317 V 116 w(ro)n(w/col)e(length)p
1832 1317 V 171 w(in)j(\014le:)37 b(matrix)27 b(A)p 2531
1317 V 105 w(in)h(\014le:)37 b(matrix)27 b(B)p 3231 1317
V 107 w(out)h(\014le:)37 b(matrix)27 b(AB)p 4051 1317
V 275 1320 3778 4 v 273 1420 4 100 v 324 1390 a(DEF:)p
553 1420 V 83 w(8)p 1132 1420 V 538 w(10)p 1832 1420
V 615 w(generated)p 2531 1420 V 348 w(generated)p 3231
1420 V 347 w(result)p 3491 1390 25 4 v 30 w(matrix.txt)p
4051 1420 4 100 v 275 1423 3778 4 v 150 1726 a(All)e(k)n(eys)f(m)n(ust)
h(b)r(e)g(lo)n(w)n(ercase)d(and)i(pre\014xed)g(b)n(y)h(a)f(dash.)36
b(The)24 b(desired)g(v)-5 b(alue)25 b(m)n(ust)g(follo)n(w)f
(immediately)g(after)150 1826 y(the)f(k)n(ey)g(\(with)g(some)g
(whitespace)f(b)r(et)n(w)n(een\).)36 b(Finally)-7 b(,)24
b(input)f(\014les)g(should)g(b)r(e)g(delimited)h(b)n(y)f(whitespace)f
(only)-7 b(.)150 1926 y(See)28 b(the)g(output)g(\014le)f(for)h(prop)r
(er)e(formatting.)150 2067 y
SDict begin H.S end
 150 2067 a 150 2067 a
SDict begin 12 H.A end
 150
2067 a 150 2067 a
SDict begin [ /View [/XYZ H.V] /Dest (section.2) cvn H.B /DEST pdfmark end
 150 2067 a 133 x Fc(2)135 b(Dining)45
b(Philosophers)150 2382 y Fd(Implemen)n(ting)29 b(the)f(Dining)h
(Philosophers)e(problem)h(turned)g(out)h(to)f(b)r(e)h(relativ)n(ely)e
(simple,)i(but)g(presen)n(ted)e(a)150 2482 y(few)32 b(unexp)r(ected)h
(concurrency)d(issues.)49 b(Ov)n(er)30 b(all,)j(I)f(learned)f(quite)h
(a)f(bit)h(ab)r(out)g(the)g(b)r(o)r(ost)g(thread)f(library)150
2581 y(while)d(writing)f(this)h(co)r(de,)f(and)h(a)f(bit)h(ab)r(out)g
(sync)n(hronization)d(as)i(w)n(ell.)150 2714 y
SDict begin H.S end
 150 2714
a 150 2714 a
SDict begin 12 H.A end
 150 2714 a 150 2714 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.2.1) cvn H.B /DEST pdfmark end
 150 2714 a 100 x Fb(2.1)112
b(Design)38 b(Decisions)150 2967 y Fd(I)29 b(made)f(a)g(few)h(notable)f
(design)g(decisions)g(while)h(w)n(orking)e(on)h(this)h(problem.)39
b(The)29 b(most)f(impactful)i(of)e(these)150 3066 y(decisions)i(w)n(as)
g(in)i(ho)n(w)e(I)h(in)n(terpreted)f(the)i(problem.)47
b(I)31 b(c)n(hose)f(to)g(implemen)n(t)i(the)f(set)g(of)g(c)n(hopstic)n
(ks)f(as)g(one)150 3166 y(uni\014ed)h(pile)g(in)g(the)g(middle)g(of)g
(the)g(table.)46 b(This)30 b(seems)h(lik)n(e)f(a)g(logical)f(thing)i
(to)g(do)f(while)h(actually)f(dining,)150 3266 y(and)23
b(philosophers)f(are)g(in)n(telligen)n(t)h(fello)n(ws,)h(so)e(they)i(w)
n(ould)e(clearly)g(go)h(with)h(that)f(solution.)35 b(As)23
b(far)g(as)f(co)r(ding)150 3365 y(is)27 b(concerned,)g(this)h(made)f
(it)i(p)r(ossible)e(to)g(limit)i(the)f(critical)f(sections)f(to)i(only)
f(that)h(one)f(resource.)275 3465 y(The)c(second)g(decision)g(I)h(made)
g(w)n(as)e(in)i(adding)f(dela)n(ys)g(whenev)n(er)f(a)i(philosopher)e
(\(thread\))i(eats)f(or)g(thinks.)150 3565 y(I)k(did)h(this)g(b)r
(ecause)f(threads)f(w)n(ere)h(managing)f(to)h(mak)n(e)g(it)g(bac)n(k)g
(to)g(the)h(section)f(of)g(co)r(de)g(in)h(whic)n(h)f(they)h(lo)r(c)n(k)
150 3664 y(the)36 b(m)n(utex)f(fast)h(to)r(o)f(quic)n(kly)-7
b(,)37 b(whic)n(h)e(mean)n(t)h(that)f(one)g(thread)g(w)n(ould)g
(generally)f(monop)r(olize)h(the)h(m)n(utex)150 3764
y(un)n(til)26 b(it)g(w)n(as)e(\014nished)i(with)g(all)f(its)h(w)n(ork.)
35 b(Adding)26 b(the)g(dela)n(y)e(made)i(the)g(philosophers)e(tak)n(e)h
(turns)g(in)h(a)f(more)150 3863 y(reasonable)h(fashion,)h(as)g(w)n(ell)
g(as)g(increased)f(the)i(dramatic)f(tension)h(during)f(run)n(time.)275
3963 y(The)k(\014nal)h(decision)f(w)n(as)g(in)h(line)g(with)g(the)g
(second;)h(forcing)e(philosophers)f(to)i(stop)f(and)h(think)g(b)r(et)n
(w)n(een)150 4063 y(plates)c(of)h(fo)r(o)r(d.)40 b(I)29
b(w)n(as)e(still)i(running)g(in)n(to)f(the)h(issue)f(of)h(one)f
(philosopher)g(b)r(ogarting)f(the)i(c)n(hopstic)n(ks.)39
b(After)150 4162 y(in)n(tro)r(ducing)27 b(this)h(mandatory)e(thinking)i
(p)r(olicy)-7 b(,)28 b(the)g(philosophers)e(b)r(egan)h(taking)g(turns)g
(in)h(earnest.)150 4295 y
SDict begin H.S end
 150 4295 a 150 4295 a
SDict begin 12 H.A end
 150 4295
a 150 4295 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.2.2) cvn H.B /DEST pdfmark end
 150 4295 a 100 x Fb(2.2)112 b(Issues)38
b(Encoun)m(tered)150 4548 y Fd(The)24 b(main)f(issues)h(I)f(encoun)n
(tered)g(in)h(this)g(program)e(rev)n(olv)n(ed)g(around)g(adapting)i(to)
f(the)h(b)r(o)r(ost)g(library)-7 b(,)23 b(rather)150
4648 y(than)g(the)h(pthreads)e(library)-7 b(,)23 b(and)g(in)h(prev)n
(en)n(ting)e(one)g(thread)h(from)g(monop)r(olizing)f(the)i(critical)e
(sections.)35 b(The)150 4747 y(c)n(hanges)30 b(I)h(made)g(\(do)r(cumen)
n(ted)h(in)f(section)g(2.1\))f(resolv)n(ed)g(the)h(latter)g(problem,)h
(and)f(a)f(bit)i(of)f(reading)f(and)150 4847 y(practice)d(resolv)n(ed)f
(the)i(former.)p 0 TeXcolorgray 1929 5349 a(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 150 -208 a
SDict begin H.S end
 150 -208 a 0 TeXcolorgray 0
TeXcolorgray 150 -208 a
SDict begin H.R end
 150 -208 a 150 -208 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn H.B /DEST pdfmark end
 150 -208
a 0 TeXcolorgray 3251 -437 a Fd(Jonah)27 b(Bro)r(oks)3303
-337 y(CS411)f(HW1)3363 -237 y(04-17-2012)p 150 -204
3600 4 v 0 TeXcolorgray 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0
a 150 0 a
SDict begin [ /View [/XYZ H.V] /Dest (section.3) cvn H.B /DEST pdfmark end
 150 0 a 83 x Fc(3)135 b(Matrix)45 b(Multiplication)150
265 y Fd(If)26 b(the)g(Dining)g(Philosopher)d(problem)j(didn't)g(get)f
(me)h(accustomed)f(to)g(b)r(o)r(ost)g(threads,)h(the)g(threaded)f(v)n
(ersion)150 364 y(of)d(Matrix)g(Multiplication)g(most)g(certainly)g
(did.)35 b(In)23 b(fact,)g(ev)n(en)f(in)g(co)r(ding)g(the)h(serial)e(v)
n(ersion)f(of)j(this)f(program)150 464 y(help)r(ed)30
b(me)f(learn)f(go)r(o)r(d)h(practices)f(for)h(parallelizing)e(co)r(de.)
42 b(I)29 b(also)f(implemen)n(ted)i(a)f(more)f(robust)g(command)150
564 y(line)g(argumen)n(t)e(system)i(than)f(I)h(ha)n(v)n(e)e(in)i(the)g
(past.)150 696 y
SDict begin H.S end
 150 696 a 150 696 a
SDict begin 12 H.A end
 150 696 a 150 696
a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.3.1) cvn H.B /DEST pdfmark end
 150 696 a 100 x Fb(3.1)112 b(Design)38 b(Decisions)150
949 y Fd(I)h(c)n(hose)e(to)i(use)f(the)h(b)r(o)r(ost)g(random)f
(library)f(for)h(generating)f(m)n(y)i(random)e(matrices,)k(rather)d
(than)g(using)150 1049 y(less)27 b(random)g(alternativ)n(es.)36
b(This)28 b(decision)f(w)n(as)g(mostly)g(c)n(hampioned)g(b)n(y)h(m)n(y)
f(in)n(terest)h(in)g(learning)e(addition)150 1149 y(libraries,)g(but)i
(the)g(extra)f(randomness)f(w)n(as)h(handy)g(as)g(w)n(ell.)275
1248 y(P)n(erhaps)16 b(the)j(most)f(eviden)n(t)g(decision)g(I)h(made)f
(in)g(writing)g(this)h(co)r(de)f(w)n(as)g(in)g(creating)g(the)g(switc)n
(h)p 3372 1248 25 4 v 30 w(parser.hpp)150 1348 y(header)29
b(\014le.)45 b(I)30 b(c)n(hose)f(to)h(write)g(this)h(\014le,)g(and)f
(the)h(class)e(it)h(con)n(tains,)g(b)r(ecause)g(I'm)h(sure)e(I)h(will)h
(w)n(an)n(t)e(to)h(use)150 1448 y(this)e(functionalit)n(y)g(in)g(the)g
(future.)37 b(There)27 b(is)h(lik)n(ely)f(a)h(b)r(etter,)g(more)f
(elegan)n(t)f(solution)i(to)f(parsing)f(command)150 1547
y(line)32 b(argumen)n(ts,)f(but)g(this)h(one)f(serv)n(ed)f(me)i(w)n
(ell)f(and)g(a\013orded)f(me)i(the)g(c)n(hance)e(to)h(learn)g(more)f
(ab)r(out)i(ho)n(w)150 1647 y(C++)27 b(classes)f(w)n(ork.)275
1746 y(Another)32 b(decision)h(I)g(made)g(w)n(as)f(in)h(ho)n(w)g(I)g
(organized)e(the)i(arra)n(ys)e(I)i(w)n(as)f(using)g(to)h(store)f(the)i
(matrices.)150 1846 y(My)25 b(initial)h(approac)n(h)e(in)n(v)n(olv)n
(ed)g(5)h(individually)g(named)g(v)-5 b(ariables,)25
b(eac)n(h)g(one)g(to)g(store)f(one)h(of)h(m)n(y)f(5)g(matrices)150
1946 y(\(A,)30 b(B,)g(AB,)g(as)e(w)n(ell)i(as)f(the)h(transp)r(ose)e
(of)i(b)r(oth)g(A)f(and)h(B\).)g(Before)e(long,)i(ho)n(w)n(ev)n(er,)e
(I)h(switc)n(hed)h(to)f(using)g(a)150 2045 y(three)g(dimensional)g
(arra)n(y)d(instead.)42 b(This)29 b(greatly)f(simpli\014ed)h(the)h
(mallo)r(c)f(and)g(free)g(pro)r(cesses,)f(as)g(w)n(ell)h(as)f(a)150
2145 y(n)n(um)n(b)r(er)g(of)g(other)g(similar)g(sections)f(of)i(co)r
(de.)38 b(As)29 b(for)f(m)n(y)g(decision)g(to)g(store)f(A)i(and)f(B)g
(transp)r(ose,)f(I)i(decided)150 2245 y(the)g(simplest)f(approac)n(h)f
(to)h(creating)f(a)h(dot)g(pro)r(duct)g(function)h(w)n(as)f(to)g(pass)f
(in)i(the)g(double)f(arra)n(ys)d(that)k(are)150 2344
y(to)g(b)r(e)h(dotted)f(together.)41 b(The)29 b(simplest)h(solution)e
(I)i(could)f(think)g(of)h(for)e(this)i(w)n(as)e(to)h(simply)g(pass)g
(the)g(arra)n(y)150 2444 y(of)h(A's)g(ro)n(w,)f(and)g(the)h(arra)n(y)e
(of)h(B)h(transv)n(erse's)d(ro)n(w.)43 b(In)29 b(hindsigh)n(t,)i(I)f
(supp)r(ose)f(I)h(didn't)g(need)g(A)g(transp)r(ose)150
2543 y(at)d(all,)h(p)r(erhaps)f(not)g(ev)n(en)h(B.)f(Ho)n(w)n(ev)n(er,)
f(it)i(is)f(nice)h(to)f(ha)n(v)n(e)g(for)g(completeness)g(and)g(p)r
(oten)n(tial)h(extensibilit)n(y)-7 b(.)275 2643 y(Ho)n(w)n(ev)n(er,)28
b(m)n(y)i(most)g(impactful)h(decision)f(w)n(as)f(in)h(making)g(m)n(y)g
(co)r(de)g(fairly)f(mo)r(dular.)44 b(I)31 b(implemen)n(ted)f(a)150
2743 y(dot)23 b(pro)r(duct)f(function,)j(as)d(w)n(ell)g(as)g(n)n
(umerous)g(other)g(functions.)36 b(In)23 b(doing)f(this,)i(I)f(w)n(as)e
(able)i(to)f(p)r(ort)h(m)n(y)f(serial)150 2842 y(co)r(de)32
b(o)n(v)n(er)f(to)h(parallel)g(with)h(v)n(ery)e(little)i(e\013ort.)51
b(Of)33 b(course,)f(part)g(of)h(that)f(trivialit)n(y)g(lies)g(in)h(ho)n
(w)f(absurdly)150 2942 y(w)n(ell)39 b(suited)g(matrix)g(manipulation)g
(is)f(for)h(parallelization)e(\(see)i(section)g(5\).)71
b(Although,)42 b(I)d(did)h(c)n(ho)r(ose)d(a)150 3042
y(m)n(uc)n(h-less-than-ideal)28 b(w)n(a)n(y)g(of)i(dividing)f(the)h(w)n
(ork)f(b)r(et)n(w)n(een)g(threads,)h(as)f(m)n(y)g(curren)n(t)g(metho)r
(d)h(\(the)g(ceiling)150 3141 y(of)e(ro)n(ws/threads\))d(ends)i(up)h
(causing)f(some)g(of)g(m)n(y)h(threads)f(to)g(ha)n(v)n(e)g(nothing)g
(to)g(do.)150 3278 y
SDict begin H.S end
 150 3278 a 150 3278 a
SDict begin 12 H.A end
 150 3278 a
150 3278 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.3.2) cvn H.B /DEST pdfmark end
 150 3278 a 96 x Fb(3.2)112 b(Issues)38 b(Encoun)m(tered)150
3527 y Fd(The)23 b(primary)g(issue)f(I)i(encoun)n(tered)e(w)n(as)h(in)g
(ho)n(w)g(I)g(divided)h(the)g(w)n(ork)e(b)r(et)n(w)n(een)h(the)h
(threads.)34 b(My)24 b(initial)f(plan)150 3626 y(of)j(setting)h(aside)f
(exactly)f(\(ro)n(ws/threads\))g(ro)n(ws)g(for)g(eac)n(h)h(thread)g
(resulted)g(in)h(m)n(ultiple)g(ro)n(ws)e(b)r(eing)h(ignored)150
3726 y(en)n(tirely)-7 b(.)46 b(This)30 b(w)n(as)g(do)g(to)h(the)g
(quirks)f(of)g(in)n(teger)g(division.)46 b(T)-7 b(o)30
b(resolv)n(e)f(this,)j(I)e(simply)h(cast)f(the)h(v)-5
b(alues)31 b(as)150 3826 y(doubles)26 b(in)g(order)f(to)h(force)f
(\015oating)h(p)r(oin)n(t)g(division,)g(then)h(to)r(ok)e(the)i(ceiling)
f(of)g(this)g(v)-5 b(alue.)37 b(This)26 b(turned)g(out)150
3925 y(to)33 b(b)r(e)g(a)f(less)h(than)g(optimal)f(solution,)i(though,)
g(as)e(this)h(results)f(in)i(some)e(threads)g(ha)n(ving)g(no)g(w)n(ork)
g(to)g(do.)150 4025 y(Ho)n(w)n(ev)n(er,)g(I)h(didn't)h(feel)f(the)h(p)r
(erformance)e(increase)f(from)i(optimizing)g(this)g(division)f(w)n
(arran)n(ted)f(the)j(large)150 4125 y(jump)28 b(in)g(complexit)n(y)-7
b(.)275 4224 y(Bey)n(ond)27 b(this)i(issue,)g(whic)n(h)f(ultimately)h
(to)r(ok)f(v)n(ery)g(little)h(time)g(to)g(resolv)n(e,)e(most)h(of)h(m)n
(y)f(time)h(w)n(as)f(tak)n(en)150 4324 y(up)j(b)n(y)g(learning)f(ab)r
(out)h(the)g(b)r(o)r(ost)g(thread)f(and)h(b)r(o)r(ost)g(random)f
(libraries,)g(as)g(w)n(ell)h(as)f(practicing)g(m)n(y)h(C++)150
4423 y(with)d(the)g(creation)f(of)g(switc)n(h)p 1129
4423 25 4 v 30 w(parser.hpp)p 0 TeXcolorgray 1929 5349
a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 150 -208 a
SDict begin H.S end
 150 -208 a 0 TeXcolorgray 0
TeXcolorgray 150 -208 a
SDict begin H.R end
 150 -208 a 150 -208 a
SDict begin [ /View [/XYZ H.V] /Dest (page.3) cvn H.B /DEST pdfmark end
 150 -208
a 0 TeXcolorgray 3251 -437 a Fd(Jonah)27 b(Bro)r(oks)3303
-337 y(CS411)f(HW1)3363 -237 y(04-17-2012)p 150 -204
3600 4 v 0 TeXcolorgray 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0
a 150 0 a
SDict begin [ /View [/XYZ H.V] /Dest (section.4) cvn H.B /DEST pdfmark end
 150 0 a 83 x Fc(4)135 b(Commit)46 b(Log)p 150
200 3800 4 v 148 300 4 100 v 200 270 a Fd(Commit)28 b(Time)p
1448 300 V 787 w(Commit)g(Message)p 3948 300 V 150 303
3800 4 v 148 502 4 200 v 200 373 a(Mon,)f(16)e(Apr)i(2012)e(21:25:19)f
(-0700)p 1448 502 V 97 w(F)-7 b(eature)25 b(complete.)36
b(I)25 b(just)h(need)f(to)g(add)g(m)n(y)f(headers,)h(clean)g(up)g(the)g
(\014le,)1499 472 y(then)k(time)f(it)g(/)f(write)g(it)h(up.)p
3948 502 V 150 506 3800 4 v 148 1203 4 698 v 200 575
a(Sat,)f(14)g(Apr)h(2012)d(19:56:06)g(-0700)p 1448 1203
V 137 w(Initial)32 b(commit.)49 b(I)31 b(wrote)g(some)g(basic)g(sk)n
(eleton)f(co)r(de)i(a)f(few)g(da)n(ys)g(ago,)1499 675
y(including)e(a)f(basic)g(dot)g(pro)r(duct)g(function.)40
b(T)-7 b(o)r(da)n(y)28 b(I)g(\014lled)h(in)f(the)h(func-)1499
775 y(tionalit)n(y)j(for)f(dining.ccp,)i(as)e(w)n(ell)h(as)f(completed)
h(the)g(serial)e(v)n(ersion)h(of)1499 874 y(the)e(matrix)e(m)n
(ultiplication)g(problem.)37 b(Both)28 b(\014les)f(need)h(sligh)n(t)f
(refactor-)1499 974 y(ing,)35 b(including)e(commen)n(ts)f(and)h
(headers.)52 b(Then)33 b(I)g(just)h(need)f(to)g(\014ll)g(in)1499
1073 y(the)24 b(ho)r(oks)f(I)h(ha)n(v)n(e)e(for)h(threading)g(supp)r
(ort)g(in)h(matrix.cpp)f(and)h(write)f(the)1499 1173
y(write-up.)p 3948 1203 V 150 1206 3800 4 v 150 1331
a
SDict begin H.S end
 150 1331 a 150 1331 a
SDict begin 12 H.A end
 150 1331 a 150 1331 a
SDict begin [ /View [/XYZ H.V] /Dest (section.5) cvn H.B /DEST pdfmark end
 150 1331
a 92 x Fc(5)135 b(Questions)45 b(and)g(Discussion)150
1528 y
SDict begin H.S end
 150 1528 a 150 1528 a
SDict begin 12 H.A end
 150 1528 a 150 1528 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.5.1) cvn H.B /DEST pdfmark end
 150
1528 a 93 x Fb(5.1)112 b(Wh)m(y)47 b(do)s(es)g(the)g(solution)g(to)f
(matrix)h(manipulation)i(lend)f(itself)f(easily)g(to)405
1737 y(parallelism?)150 1891 y Fd(Matrix)40 b(manipulation)h(\(suc)n(h)
g(as)g(matrix)g(m)n(ultiplication\))g(lends)g(itself)h(to)f
(parallelism)f(remark)-5 b(ably)39 b(w)n(ell)150 1990
y(b)r(ecause)34 b(no)f(t)n(w)n(o)g(op)r(erations)g(rely)g(on)h(eac)n(h)
f(other.)55 b(Because)33 b(of)h(this,)i(eac)n(h)d(thread)h(can)f(w)n
(ork)g(on)h(its)g(o)n(wn)150 2090 y(section)27 b(of)h(the)g(data)f
(without)h(w)n(orrying)d(ab)r(out)j(critical)f(sections)g(or)f(sync)n
(hronization.)275 2190 y(As)18 b(can)h(b)r(e)g(seen)g(in)g(the)g(follo)
n(wing)f(graph,)i(the)f(run)n(time)g(of)g(the)g(threaded)f(v)n(ersion)g
(gro)n(ws)e(m)n(uc)n(h)j(more)f(slo)n(wly)150 2289 y(than)j(that)g(of)g
(the)h(serial)e(v)n(ersion,)g(and,)j(therefore,)e(w)n(ould)g
(drastically)e(outp)r(erform)i(it)g(when)g(m)n(ultiplying)h(large)150
2389 y(matrices.)275 2488 y
 gsave currentpoint currentpoint translate 270 neg rotate neg exch neg exch translate
 275 2488 a @beginspecial
50 @llx 50 @lly 554 @urx 770 @ury 2880 @rwi @setspecial
%%BeginDocument: size_graph.eps
%!PS-Adobe-2.0
%%Title: size_graph.eps
%%Creator: gnuplot 4.4 patchlevel 2
%%CreationDate: Tue Apr 17 21:44:10 2012
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color false def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape true def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -46 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (size_graph.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 2)
  /Author (brookjon)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Tue Apr 17 21:44:10 2012)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 554 50 lineto 554 770 lineto 50 770 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
doclip
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
686 448 M
63 0 V
6198 0 R
-63 0 V
602 448 M
( 0) Rshow
1.000 UL
LTb
686 1044 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 0.5) Rshow
1.000 UL
LTb
686 1640 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1) Rshow
1.000 UL
LTb
686 2236 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.5) Rshow
1.000 UL
LTb
686 2831 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 2) Rshow
1.000 UL
LTb
686 3427 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 2.5) Rshow
1.000 UL
LTb
686 4023 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 3) Rshow
1.000 UL
LTb
686 4619 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 3.5) Rshow
1.000 UL
LTb
686 448 M
0 63 V
0 4108 R
0 -63 V
686 308 M
( 0) Cshow
1.000 UL
LTb
1312 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 100) Cshow
1.000 UL
LTb
1938 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 200) Cshow
1.000 UL
LTb
2564 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 300) Cshow
1.000 UL
LTb
3190 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 400) Cshow
1.000 UL
LTb
3817 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 500) Cshow
1.000 UL
LTb
4443 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 600) Cshow
1.000 UL
LTb
5069 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 700) Cshow
1.000 UL
LTb
5695 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 800) Cshow
1.000 UL
LTb
6321 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 900) Cshow
1.000 UL
LTb
6947 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 1000) Cshow
1.000 UL
LTb
1.000 UL
LTb
686 4619 N
686 448 L
6261 0 V
0 4171 V
-6261 0 V
Z stroke
LCb setrgbcolor
112 2533 M
currentpoint gsave translate -270 rotate 0 0 M
(Time \(s\)) Cshow
grestore
LTb
LCb setrgbcolor
3816 98 M
(Matrix Size) Cshow
LTb
3816 4829 M
(Matrix Size vs Time) Cshow
1.000 UP
1.000 UL
LTb
% Begin plot #1
1.000 UP
1.000 UL
LT0
LCb setrgbcolor
6296 4486 M
(Serial) Rshow
LT0
6380 4486 M
399 0 V
699 448 M
12 0 V
38 0 V
37 0 V
100 1 V
201 3 V
225 2 V
977 59 V
3892 950 L
6947 4380 L
699 448 Pls
711 448 Pls
749 448 Pls
786 448 Pls
886 449 Pls
1087 452 Pls
1312 454 Pls
2289 513 Pls
3892 950 Pls
6947 4380 Pls
6579 4486 Pls
% End plot #1
% Begin plot #2
1.000 UP
1.000 UL
LT1
LCb setrgbcolor
6296 4346 M
(Threaded) Rshow
LT1
6380 4346 M
399 0 V
699 449 M
12 0 V
38 0 V
37 0 V
100 0 V
201 1 V
225 0 V
977 20 V
1603 95 V
3055 797 V
699 449 Crs
711 449 Crs
749 449 Crs
786 449 Crs
886 449 Crs
1087 450 Crs
1312 450 Crs
2289 470 Crs
3892 565 Crs
6947 1362 Crs
6579 4346 Crs
% End plot #2
1.000 UL
LTb
686 4619 N
686 448 L
6261 0 V
0 4171 V
-6261 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1

%%EndDocument
 @endspecial 2675 2488 a
 currentpoint grestore moveto
 2675 2488 a 0 TeXcolorgray 1929
5349 a Fd(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 150 -208 a
SDict begin H.S end
 150 -208 a 0 TeXcolorgray 0
TeXcolorgray 150 -208 a
SDict begin H.R end
 150 -208 a 150 -208 a
SDict begin [ /View [/XYZ H.V] /Dest (page.4) cvn H.B /DEST pdfmark end
 150 -208
a 0 TeXcolorgray -29 x Fa(5.2)82 b(Optim)n(um)28 b(n)n(um)n(b)r(er)f
(of)h(threads)f(to)g(create)g(for)g(a)g(matrix)g(of)h(size)f(1000?)3251
-437 y Fd(Jonah)g(Bro)r(oks)3303 -337 y(CS411)f(HW1)3363
-237 y(04-17-2012)p 150 -204 3600 4 v 0 TeXcolorgray
150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0 a 150 0 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.5.2) cvn H.B /DEST pdfmark end
 150 0 a 83 x
Fb(5.2)112 b(Optim)m(um)39 b(n)m(um)m(b)s(er)f(of)g(threads)g(to)f
(create)g(for)h(a)f(matrix)h(of)g(size)g(1000?)150 236
y Fd(F)-7 b(rom)28 b(m)n(y)g(testing,)g(I)g(can't)g(notice)g(a)g(p)r
(oin)n(t)h(where)e(extra)h(threads)f(slo)n(w)g(do)n(wn)h(p)r
(erformance.)37 b(Although)29 b(the)150 336 y(b)r(ene\014t)d(do)r(es)e
(tap)r(er)h(o\013,)h(and)e(it)i(lo)r(oks)e(as)g(though)h(it)g(will)g
(start)g(to)f(slo)n(w)g(do)n(wn)h(with)g(an)n(y)f(threads)h(past)f(256)
g(or)150 436 y(so.)40 b(Therefore,)29 b(I)g(w)n(ould)f(sa)n(y)-7
b(,)29 b(judging)g(b)n(y)f(m)n(y)h(data,)g(that)g(16)g(to)f(32)h
(threads)f(is)h(optimal)g(\(on)g(m)n(y)f(computer)150
535 y(with)g(8)f(threads)g(of)h(execution\).)275 635
y(The)k(follo)n(wing)f(semi-log)g(graph)g(sho)n(ws)g(the)i(time)f(it)h
(to)r(ok)f(to)g(m)n(ultiply)h(t)n(w)n(o)e(1000x1000)d(matrices)k(with)
150 734 y(v)-5 b(arying)26 b(n)n(um)n(b)r(ers)i(of)f(threads:)275
834 y
 gsave currentpoint currentpoint translate 270 neg rotate neg exch neg exch translate
 275 834 a @beginspecial 50 @llx 50 @lly 554 @urx
770 @ury 2880 @rwi @setspecial
%%BeginDocument: thread_graph.eps
%!PS-Adobe-2.0
%%Title: thread_graph.eps
%%Creator: gnuplot 4.4 patchlevel 2
%%CreationDate: Tue Apr 17 22:13:30 2012
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 554 770
%%Orientation: Landscape
%%Pages: (atend)
%%EndComments
%%BeginProlog
/gnudict 256 dict def
gnudict begin
%
% The following true/false flags may be edited by hand if desired.
% The unit line width and grayscale image gamma correction may also be changed.
%
/Color false def
/Blacktext false def
/Solid false def
/Dashlength 1 def
/Landscape true def
/Level1 false def
/Rounded false def
/ClipToBoundingBox false def
/TransparentPatterns false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/Gamma 1.0 def
%
/vshift -46 def
/dl1 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul sub dup 0 le { pop 0.01 } if } if
} def
/dl2 {
  10.0 Dashlength mul mul
  Rounded { currentlinewidth 0.75 mul add } if
} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
Level1 {} {
/SDict 10 dict def
systemdict /pdfmark known not {
  userdict /pdfmark systemdict /cleartomark get put
} if
SDict begin [
  /Title (thread_graph.eps)
  /Subject (gnuplot plot)
  /Creator (gnuplot 4.4 patchlevel 2)
  /Author (brookjon)
%  /Producer (gnuplot)
%  /Keywords ()
  /CreationDate (Tue Apr 17 22:13:30 2012)
  /DOCINFO pdfmark
end
} ifelse
/doclip {
  ClipToBoundingBox {
    newpath 50 50 moveto 554 50 lineto 554 770 lineto 50 770 lineto closepath
    clip
  } if
} def
%
% Gnuplot Prolog Version 4.4 (August 2010)
%
%/SuppressPDFMark true def
%
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/Z {closepath} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/g {setgray} bind def
/Gshow {show} def   % May be redefined later in the file to support UTF-8
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow {currentpoint stroke M 0 vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Rshow {currentpoint stroke M dup stringwidth pop neg vshift R
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/Cshow {currentpoint stroke M dup stringwidth pop -2 div vshift R 
	Blacktext {gsave 0 setgray show grestore} {show} ifelse} def
/UP {dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def} def
/DL {Color {setrgbcolor Solid {pop []} if 0 setdash}
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse} def
/BL {stroke userlinewidth 2 mul setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/AL {stroke userlinewidth 2 div setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
/UL {dup gnulinewidth mul /userlinewidth exch def
	dup 1 lt {pop 1} if 10 mul /udl exch def} def
/PL {stroke userlinewidth setlinewidth
	Rounded {1 setlinejoin 1 setlinecap} if} def
3.8 setmiterlimit
% Default Line colors
/LCw {1 1 1} def
/LCb {0 0 0} def
/LCa {0 0 0} def
/LC0 {1 0 0} def
/LC1 {0 1 0} def
/LC2 {0 0 1} def
/LC3 {1 0 1} def
/LC4 {0 1 1} def
/LC5 {1 1 0} def
/LC6 {0 0 0} def
/LC7 {1 0.3 0} def
/LC8 {0.5 0.5 0.5} def
% Default Line Types
/LTw {PL [] 1 setgray} def
/LTb {BL [] LCb DL} def
/LTa {AL [1 udl mul 2 udl mul] 0 setdash LCa setrgbcolor} def
/LT0 {PL [] LC0 DL} def
/LT1 {PL [4 dl1 2 dl2] LC1 DL} def
/LT2 {PL [2 dl1 3 dl2] LC2 DL} def
/LT3 {PL [1 dl1 1.5 dl2] LC3 DL} def
/LT4 {PL [6 dl1 2 dl2 1 dl1 2 dl2] LC4 DL} def
/LT5 {PL [3 dl1 3 dl2 1 dl1 3 dl2] LC5 DL} def
/LT6 {PL [2 dl1 2 dl2 2 dl1 6 dl2] LC6 DL} def
/LT7 {PL [1 dl1 2 dl2 6 dl1 2 dl2 1 dl1 2 dl2] LC7 DL} def
/LT8 {PL [2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 2 dl2 2 dl1 4 dl2] LC8 DL} def
/Pnt {stroke [] 0 setdash gsave 1 setlinecap M 0 0 V stroke grestore} def
/Dia {stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt} def
/Pls {stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
 } def
/Box {stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt} def
/Crs {stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke} def
/TriU {stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt} def
/Star {2 copy Pls Crs} def
/BoxF {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath fill} def
/TriUF {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill} def
/TriD {stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt} def
/TriDF {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill} def
/Pent {stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt} def
/PentF {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore} def
/Circle {stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt} def
/CircleF {stroke [] 0 setdash hpt 0 360 arc fill} def
/C0 {BL [] 0 setdash 2 copy moveto vpt 90 450 arc} bind def
/C1 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C2 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C3 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C4 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C5 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc
	2 copy moveto
	2 copy vpt 180 270 arc closepath fill
	vpt 0 360 arc} bind def
/C6 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C7 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 270 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C8 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C9 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 270 450 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C10 {BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
	2 copy moveto
	2 copy vpt 90 180 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C11 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 180 arc closepath fill
	2 copy moveto
	2 copy vpt 270 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C12 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C13 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 0 90 arc closepath fill
	2 copy moveto
	2 copy vpt 180 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/C14 {BL [] 0 setdash 2 copy moveto
	2 copy vpt 90 360 arc closepath fill
	vpt 0 360 arc} bind def
/C15 {BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
	vpt 0 360 arc closepath} bind def
/Rec {newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
	neg 0 rlineto closepath} bind def
/Square {dup Rec} bind def
/Bsquare {vpt sub exch vpt sub exch vpt2 Square} bind def
/S0 {BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare} bind def
/S1 {BL [] 0 setdash 2 copy vpt Square fill Bsquare} bind def
/S2 {BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S3 {BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare} bind def
/S4 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S5 {BL [] 0 setdash 2 copy 2 copy vpt Square fill
	exch vpt sub exch vpt sub vpt Square fill Bsquare} bind def
/S6 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S7 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S8 {BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare} bind def
/S9 {BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare} bind def
/S10 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
	Bsquare} bind def
/S11 {BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
	Bsquare} bind def
/S12 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare} bind def
/S13 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy vpt Square fill Bsquare} bind def
/S14 {BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
	2 copy exch vpt sub exch vpt Square fill Bsquare} bind def
/S15 {BL [] 0 setdash 2 copy Bsquare fill Bsquare} bind def
/D0 {gsave translate 45 rotate 0 0 S0 stroke grestore} bind def
/D1 {gsave translate 45 rotate 0 0 S1 stroke grestore} bind def
/D2 {gsave translate 45 rotate 0 0 S2 stroke grestore} bind def
/D3 {gsave translate 45 rotate 0 0 S3 stroke grestore} bind def
/D4 {gsave translate 45 rotate 0 0 S4 stroke grestore} bind def
/D5 {gsave translate 45 rotate 0 0 S5 stroke grestore} bind def
/D6 {gsave translate 45 rotate 0 0 S6 stroke grestore} bind def
/D7 {gsave translate 45 rotate 0 0 S7 stroke grestore} bind def
/D8 {gsave translate 45 rotate 0 0 S8 stroke grestore} bind def
/D9 {gsave translate 45 rotate 0 0 S9 stroke grestore} bind def
/D10 {gsave translate 45 rotate 0 0 S10 stroke grestore} bind def
/D11 {gsave translate 45 rotate 0 0 S11 stroke grestore} bind def
/D12 {gsave translate 45 rotate 0 0 S12 stroke grestore} bind def
/D13 {gsave translate 45 rotate 0 0 S13 stroke grestore} bind def
/D14 {gsave translate 45 rotate 0 0 S14 stroke grestore} bind def
/D15 {gsave translate 45 rotate 0 0 S15 stroke grestore} bind def
/DiaE {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke} def
/BoxE {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke} def
/TriUE {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke} def
/TriDE {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke} def
/PentE {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore} def
/CircE {stroke [] 0 setdash 
  hpt 0 360 arc stroke} def
/Opaque {gsave closepath 1 setgray fill grestore 0 setgray closepath} def
/DiaW {stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke} def
/BoxW {stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke} def
/TriUW {stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke} def
/TriDW {stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke} def
/PentW {stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore} def
/CircW {stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke} def
/BoxFill {gsave Rec 1 setgray fill grestore} def
/Density {
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor} def
/BoxColFill {gsave Rec PolyFill} def
/PolyFill {gsave Density fill grestore grestore} def
/h {rlineto rlineto rlineto gsave closepath fill grestore} bind def
%
% PostScript Level 1 Pattern Fill routine for rectangles
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill {gsave /PFa [ 9 2 roll ] def
  PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
  PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
  gsave 1 setgray fill grestore clip
  currentlinewidth 0.5 mul setlinewidth
  /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
  0 0 M PFa 5 get rotate PFs -2 div dup translate
  0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 M 0 PFs V} for
  0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{PFa 4 get mul 0 2 1 roll M PFs 0 V} for
 } if
  stroke grestore} def
%
/languagelevel where
 {pop languagelevel} {1} ifelse
 2 lt
	{/InterpretLevel1 true def}
	{/InterpretLevel1 Level1 def}
 ifelse
%
% PostScript level 2 pattern fill definitions
%
/Level2PatternFill {
/Tile8x8 {/PaintType 2 /PatternType 1 /TilingType 1 /BBox [0 0 8 8] /XStep 8 /YStep 8}
	bind def
/KeepColor {currentrgbcolor [/Pattern /DeviceRGB] setcolorspace} bind def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke} 
>> matrix makepattern
/Pat1 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 8 8 L 0 8 M 8 0 L stroke
	0 4 M 4 8 L 8 4 L 4 0 L 0 4 L stroke}
>> matrix makepattern
/Pat2 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 0 M 0 8 L
	8 8 L 8 0 L 0 0 L fill}
>> matrix makepattern
/Pat3 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 8 M 8 -4 L
	0 12 M 12 0 L stroke}
>> matrix makepattern
/Pat4 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -4 0 M 8 12 L
	0 -4 M 12 8 L stroke}
>> matrix makepattern
/Pat5 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 8 M 4 -4 L
	0 12 M 8 -4 L 4 12 M 10 0 L stroke}
>> matrix makepattern
/Pat6 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop -2 0 M 4 12 L
	0 -4 M 8 12 L 4 -4 M 10 8 L stroke}
>> matrix makepattern
/Pat7 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 8 -2 M -4 4 L
	12 0 M -4 8 L 12 4 M 0 10 L stroke}
>> matrix makepattern
/Pat8 exch def
<< Tile8x8
 /PaintProc {0.5 setlinewidth pop 0 -2 M 12 4 L
	-4 0 M 12 8 L -4 4 M 8 10 L stroke}
>> matrix makepattern
/Pat9 exch def
/Pattern1 {PatternBgnd KeepColor Pat1 setpattern} bind def
/Pattern2 {PatternBgnd KeepColor Pat2 setpattern} bind def
/Pattern3 {PatternBgnd KeepColor Pat3 setpattern} bind def
/Pattern4 {PatternBgnd KeepColor Landscape {Pat5} {Pat4} ifelse setpattern} bind def
/Pattern5 {PatternBgnd KeepColor Landscape {Pat4} {Pat5} ifelse setpattern} bind def
/Pattern6 {PatternBgnd KeepColor Landscape {Pat9} {Pat6} ifelse setpattern} bind def
/Pattern7 {PatternBgnd KeepColor Landscape {Pat8} {Pat7} ifelse setpattern} bind def
} def
%
%
%End of PostScript Level 2 code
%
/PatternBgnd {
  TransparentPatterns {} {gsave 1 setgray fill grestore} ifelse
} def
%
% Substitute for Level 2 pattern fill codes with
% grayscale if Level 2 support is not selected.
%
/Level1PatternFill {
/Pattern1 {0.250 Density} bind def
/Pattern2 {0.500 Density} bind def
/Pattern3 {0.750 Density} bind def
/Pattern4 {0.125 Density} bind def
/Pattern5 {0.375 Density} bind def
/Pattern6 {0.625 Density} bind def
/Pattern7 {0.875 Density} bind def
} def
%
% Now test for support of Level 2 code
%
Level1 {Level1PatternFill} {Level2PatternFill} ifelse
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
end
%%EndProlog
%%Page: 1 1
gnudict begin
gsave
doclip
50 50 translate
0.100 0.100 scale
90 rotate
0 -5040 translate
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
686 448 M
63 0 V
6198 0 R
-63 0 V
602 448 M
( 0.7) Rshow
1.000 UL
LTb
686 827 M
63 0 V
6198 0 R
-63 0 V
602 827 M
( 0.8) Rshow
1.000 UL
LTb
686 1206 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 0.9) Rshow
1.000 UL
LTb
686 1586 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1) Rshow
1.000 UL
LTb
686 1965 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.1) Rshow
1.000 UL
LTb
686 2344 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.2) Rshow
1.000 UL
LTb
686 2723 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.3) Rshow
1.000 UL
LTb
686 3102 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.4) Rshow
1.000 UL
LTb
686 3481 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.5) Rshow
1.000 UL
LTb
686 3861 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.6) Rshow
1.000 UL
LTb
686 4240 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.7) Rshow
1.000 UL
LTb
686 4619 M
63 0 V
6198 0 R
-63 0 V
-6282 0 R
( 1.8) Rshow
1.000 UL
LTb
686 448 M
0 63 V
0 4108 R
0 -63 V
686 308 M
( 2) Cshow
1.000 UL
LTb
1580 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 4) Cshow
1.000 UL
LTb
2475 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 8) Cshow
1.000 UL
LTb
3369 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 16) Cshow
1.000 UL
LTb
4264 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 32) Cshow
1.000 UL
LTb
5158 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 64) Cshow
1.000 UL
LTb
6053 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 128) Cshow
1.000 UL
LTb
6947 448 M
0 63 V
0 4108 R
0 -63 V
0 -4248 R
( 256) Cshow
1.000 UL
LTb
1.000 UL
LTb
686 4619 N
686 448 L
6261 0 V
0 4171 V
-6261 0 V
Z stroke
LCb setrgbcolor
112 2533 M
currentpoint gsave translate -270 rotate 0 0 M
(Time \(s\)) Cshow
grestore
LTb
LCb setrgbcolor
3816 98 M
(log_2\(Threads\)) Cshow
LTb
3816 4829 M
(Threads vs Time \(size = 1000x1000\)) Cshow
1.000 UP
1.000 UL
LTb
% Begin plot #1
1.000 UP
1.000 UL
LT0
LCb setrgbcolor
6296 4486 M
(Threads) Rshow
LT0
6380 4486 M
399 0 V
686 4270 M
1580 1539 L
2475 944 L
3369 735 L
895 -7 V
894 514 V
6053 903 L
894 -24 V
686 4270 Pls
1580 1539 Pls
2475 944 Pls
3369 735 Pls
4264 728 Pls
5158 1242 Pls
6053 903 Pls
6947 879 Pls
6579 4486 Pls
% End plot #1
1.000 UL
LTb
686 4619 N
686 448 L
6261 0 V
0 4171 V
-6261 0 V
Z stroke
1.000 UP
1.000 UL
LTb
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
%%Pages: 1

%%EndDocument
 @endspecial 2675 834 a
 currentpoint grestore moveto
 2675 834 a 150 3350 a
SDict begin H.S end
 150 3350
a 150 3350 a
SDict begin 12 H.A end
 150 3350 a 150 3350 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.5.3) cvn H.B /DEST pdfmark end
 150 3350 a 78 x Fb(5.3)112
b(Wh)m(y)38 b(do)f(w)m(e)h(see)g(a)f(slo)m(w)h(do)m(wn)g(as)g(the)f(n)m
(um)m(b)s(er)i(of)e(threads)h(go)s(es)g(up?)150 3581
y Fd(Although)26 b(I)h(did)g(not)f(notice)g(a)g(large)f(slo)n(w)g(do)n
(wn)h(with)h(under)f(300)f(threads)h(\(whic)n(h)g(w)n(as)g(the)g
(largest)f(n)n(um)n(b)r(er)150 3681 y(I)34 b(could)f(run)h(on)f(m)n(y)h
(test)g(mac)n(hine\),)h(it)f(do)r(es)g(app)r(ear)e(that)i(an)n(y)f
(extra)g(threads)g(o)n(v)n(er)f(that)i(amoun)n(t)g(w)n(ould)150
3780 y(activ)n(ely)28 b(harm)h(p)r(erformance.)40 b(My)29
b(guess)g(is)g(that,)h(at)f(some)f(p)r(oin)n(t,)i(the)g(v)-5
b(alue)29 b(w)n(e)f(gain)h(from)g(extra)f(threads)150
3880 y(is)g(o)n(v)n(ertak)n(en)e(b)n(y)i(the)g(o)n(v)n(erhead)e(that)i
(thread)g(creation)f(costs.)38 b(This)28 b(e\013ect)h(is)f(further)g
(increased)f(b)n(y)g(the)i(fact)150 3979 y(that)c(m)n(y)f(system)g
(only)g(has)g(8)g(threads)f(of)i(execution)f(a)n(v)-5
b(ailable)23 b(at)h(an)n(y)g(giv)n(en)f(time.)37 b(Extra)23
b(threads)g(b)r(ey)n(ond)h(8)150 4079 y(ma)n(y)g(help)i(m)n(y)e(p)r
(erformance)g(due)h(to)g(other)g(threads)f(w)n(aiting)g(on)h(io)f(or)g
(blo)r(c)n(king)h(for)f(an)n(y)g(n)n(um)n(b)r(er)h(of)g(reasons,)150
4179 y(but)j(that)g(e\013ect)g(will)g(ha)n(v)n(e)e(rapidly)h
(diminishing)h(returns.)150 4311 y
SDict begin H.S end
 150 4311 a 150 4311
a
SDict begin 12 H.A end
 150 4311 a 150 4311 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.5.4) cvn H.B /DEST pdfmark end
 150 4311 a 100 x Fb(5.4)112 b(What)38
b(do)f(y)m(ou)h(think)g(the)f(main)i(p)s(oin)m(t)f(of)f(this)h
(assignmen)m(t)h(is?)150 4564 y Fd(I)28 b(w)n(ould)f(assume)g(the)h
(main)g(p)r(oin)n(t)g(of)g(this)g(assignmen)n(t)e(w)n(as)h(to)h(sho)n
(w)f(the)h(con)n(trast)e(b)r(et)n(w)n(een)i(problems)f(that)150
4664 y(in)n(v)n(olv)n(e)20 b(excessiv)n(e)g(sync)n(hronization)f(\(suc)
n(h)i(as)g(the)h(Dining)f(Philosophers\),)g(and)g(ones)g(that)h
(require)e(absolutely)150 4764 y(no)33 b(sync)n(hronization)e(\(suc)n
(h)h(as)h(Matrix)f(Multiplication\).)53 b(Also,)34 b(it)g(serv)n(ers)d
(as)h(a)g(go)r(o)r(d)h(refresher)e(for)h(using)150 4863
y(threads)27 b(and)g(\014le)h(io,)f(as)g(w)n(ell)g(as)g(an)g(in)n(tro)r
(duction)h(to)f(whic)n(hev)n(er)f(threading)h(library)f(the)i(studen)n
(t)g(has)f(y)n(et)g(to)150 4963 y(use.)p 0 TeXcolorgray
1929 5349 a(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray 150 -208 a
SDict begin H.S end
 150 -208 a 0 TeXcolorgray 0
TeXcolorgray 150 -208 a
SDict begin H.R end
 150 -208 a 150 -208 a
SDict begin [ /View [/XYZ H.V] /Dest (page.5) cvn H.B /DEST pdfmark end
 150 -208
a 0 TeXcolorgray -29 x Fa(5.5)82 b(Ho)n(w)27 b(did)h(y)n(ou)f(approac)n
(h)f(the)i(problem?)3251 -437 y Fd(Jonah)f(Bro)r(oks)3303
-337 y(CS411)f(HW1)3363 -237 y(04-17-2012)p 150 -204
3600 4 v 0 TeXcolorgray 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 12 H.A end
 150 0
a 150 0 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.5.5) cvn H.B /DEST pdfmark end
 150 0 a 83 x Fb(5.5)112 b(Ho)m(w)37 b(did)h(y)m(ou)g(approac)
m(h)h(the)e(problem?)150 236 y Fd(Most)28 b(of)g(m)n(y)f(design)h
(decisions)f(are)g(do)r(cumen)n(ted)h(ab)r(o)n(v)n(e,)f(but)i(the)f
(primary)f(theme)h(b)r(et)n(w)n(een)g(them)h(is)f(that)g(I)150
336 y(tried)c(to)g(\014nd)h(w)n(a)n(ys)d(to)i(mak)n(e)f(the)i(transfer)
e(to)h(m)n(ultithreaded)g(co)r(de)g(as)f(simple)i(as)e(p)r(ossible.)36
b(The)24 b(\014rst)g(step)g(in)150 436 y(doing)k(so)g(w)n(as)f(in)i
(plotting)g(out)f(all)g(m)n(y)h(co)r(de)f(b)r(efore)g(I)h(b)r(egan,)f
(b)n(y)g(creating)g(sk)n(eleton)f(functions)i(and)f(pseudo)150
535 y(co)r(de.)45 b(This)31 b(help)r(ed)g(me)f(to)h(structure)f(m)n(y)g
(co)r(de)g(for)g(parallelization)f(b)r(efore)h(I)h(ev)n(en)f(b)r(egan.)
45 b(The)30 b(next)h(step)150 635 y(w)n(as)f(in)h(ho)n(w)f(I)h(w)n(en)n
(t)f(ab)r(out)h(writing)g(the)g(serial)e(v)n(ersion)h(of)g(the)i
(Matrix)e(Multiplication)h(co)r(de;)h(b)n(y)f(carefully)150
734 y(planing)f(whic)n(h)g(sections)f(of)h(co)r(de)g(should)g(b)r(e)h
(where,)f(I)g(w)n(as)f(able)h(to)g(implemen)n(t)h(threads)e(with)i
(remark)-5 b(ably)150 834 y(little)28 b(additional)f(e\013ort.)150
950 y
SDict begin H.S end
 150 950 a 150 950 a
SDict begin 12 H.A end
 150 950 a 150 950 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.5.6) cvn H.B /DEST pdfmark end
 150 950
a 116 x Fb(5.6)112 b(Ho)m(w)37 b(did)h(y)m(ou)g(ensure)g(y)m(our)g
(solution)g(w)m(as)f(correct?)150 1220 y Fd(F)-7 b(or)28
b(the)i(Matrix)e(Multiplication)i(problem,)f(I)g(simply)g(stored)f(all)
h(three)g(matrices)f(and)h(plugged)f(their)h(v)-5 b(alues)150
1319 y(in)n(to)24 b(an)g(online)g(matrix)g(calculator.)34
b(I)24 b(also)g(used)g(a)g(few)g(prop)r(erties)g(of)g(matrices)f(to)h
(c)n(hec)n(k)g(m)n(y)g(results)g(as)f(w)n(ell,)150 1419
y(suc)n(h)k(as)g(AI)h(=)f(A,)h(b)n(y)g(pro)n(viding)e(a)h(\014le)h
(with)g(some)f(matrix)g(and)g(a)h(\014le)f(with)h(the)g(iden)n(tit)n(y)
g(matrix.)275 1519 y(As)c(for)f(the)i(Dining)f(Philosopher)f(problem,)h
(I)g(mostly)g(just)h(lo)r(ok)n(ed)e(at)h(the)g(output:)36
b(They)24 b(all)g(ate;)h(they)f(all)150 1618 y(though)n(t;)30
b(they)g(to)r(ok)f(turns;)i(and)e(no)h(more)f(than)g(2)h(philosophers)e
(w)n(ere)h(ev)n(er)f(eating)h(at)h(once.)42 b(I'm)30
b(not)g(sure)150 1718 y(that)e(other)f(testing)g(I)h(could)g(ha)n(v)n
(e)e(done.)150 1850 y
SDict begin H.S end
 150 1850 a 150 1850 a
SDict begin 12 H.A end
 150 1850
a 150 1850 a
SDict begin [ /View [/XYZ H.V] /Dest (subsection.5.7) cvn H.B /DEST pdfmark end
 150 1850 a 100 x Fb(5.7)112 b(What)38 b(did)g(y)m(ou)f
(learn?)150 2103 y Fd(Ab)r(o)n(v)n(e)27 b(all)h(else,)g(I)g(learned)g
(a)f(great)g(deal)h(ab)r(out)g(the)g(b)r(o)r(ost)g(thread)g(library)f
(and)h(the)g(b)r(o)r(ost)g(random)f(library)-7 b(.)150
2203 y(After)29 b(a)e(bit)i(of)f(reading)f(and)h(pla)n(ying)f(around)h
(with)g(some)g(test)g(programs,)e(I)j(found)f(that)h(b)r(o)r(ost)f
(threads)f(are)150 2303 y(incredibly)h(simple)g(to)f(use.)38
b(I)27 b(also)g(\(re\)learned)g(ho)n(w)g(to)h(implemen)n(t)g(classes)f
(and)h(headers)e(in)i(C++.)37 b(Finally)-7 b(,)150 2402
y(I)31 b(learned)g(a)g(bit)h(more)f(ab)r(out)g(LaT)-7
b(eX)31 b(while)h(writing)f(this)h(write-up.)48 b(All)31
b(in)h(all)f(I)h(think)g(I)f(learned)g(quite)g(a)150
2502 y(bit,)d(and,)g(most)f(of)h(all,)f(got)g(bac)n(k)g(in)h(the)g
(swing)f(of)g(C/C++)f(co)r(ding.)p 0 TeXcolorgray 1929
5349 a(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
